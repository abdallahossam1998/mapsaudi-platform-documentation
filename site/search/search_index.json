{"config":{"indexing":"full","lang":["en","ar"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"ArcMap/","text":"Integrating MapSaudi in ArcGIS with WMTS and XYZ Estimated reading time : 3 minutes Getting started The following tutorial was created using the latest version of ArcGIS ArcMap Desktop. The process is however the same for versions 10.0 and newer. Thanks to these instructions, you could use WMTS to manipulate your different map layers in ArcGIS ArcMap. Retrieve data The WMTS endpoint provided by MapSaudi is very simple : https://basemaps.mapsaudi.com/YOUR_STYLE_ID/wmts?access-token=YOUR_ACCESS_TOKEN You just need to replace YOUR_ACCESS_TOKEN by your real access token that you can find in your account and YOUR_STYLE_ID by your style ID. You can find your style id in Keys section: Tutorial Step 1 To import WMTS file layers in ArcMap, right-click on the Layer item on the left panel menu then Add Data... Step 2 In the new opened window, click on the dropdown list and select the GIS Servers item. The window is refreshed and you can double-click on Add WMTS Server... or select the item and click Add to create a new data source for ArcMap. Step 3 A new window opens with settings to configure. Paste the link of your WMTS access in the first input then click on Get Layers to retrieve the WMTS data. A window will appear to ask you for a login and a password, just click Cancel to connect without login. Click OK to accept the changes and close the settings window. Step 4 Once your WMTS server is added, double-click on the server name you've just created. Do not click on \"Add\" it won't connect to your server! Step 5 In the next view, you will be able to see the layers of your WMTS freshly imported from the web. Double-click on the layer you want to use in ArcMap. And take a look at the result! We hope that this tutorial was very helpful!","title":"ArcMap"},{"location":"ArcMap/#integrating-mapsaudi-in-arcgis-with-wmts-and-xyz","text":"Estimated reading time : 3 minutes","title":"Integrating MapSaudi in ArcGIS with WMTS and XYZ"},{"location":"ArcMap/#getting-started","text":"The following tutorial was created using the latest version of ArcGIS ArcMap Desktop. The process is however the same for versions 10.0 and newer. Thanks to these instructions, you could use WMTS to manipulate your different map layers in ArcGIS ArcMap.","title":"Getting started"},{"location":"ArcMap/#retrieve-data","text":"The WMTS endpoint provided by MapSaudi is very simple : https://basemaps.mapsaudi.com/YOUR_STYLE_ID/wmts?access-token=YOUR_ACCESS_TOKEN You just need to replace YOUR_ACCESS_TOKEN by your real access token that you can find in your account and YOUR_STYLE_ID by your style ID. You can find your style id in Keys section:","title":"Retrieve data"},{"location":"ArcMap/#tutorial","text":"","title":"Tutorial"},{"location":"ArcMap/#step-1","text":"To import WMTS file layers in ArcMap, right-click on the Layer item on the left panel menu then Add Data...","title":"Step 1"},{"location":"ArcMap/#step-2","text":"In the new opened window, click on the dropdown list and select the GIS Servers item. The window is refreshed and you can double-click on Add WMTS Server... or select the item and click Add to create a new data source for ArcMap.","title":"Step 2"},{"location":"ArcMap/#step-3","text":"A new window opens with settings to configure. Paste the link of your WMTS access in the first input then click on Get Layers to retrieve the WMTS data. A window will appear to ask you for a login and a password, just click Cancel to connect without login. Click OK to accept the changes and close the settings window.","title":"Step 3"},{"location":"ArcMap/#step-4","text":"Once your WMTS server is added, double-click on the server name you've just created. Do not click on \"Add\" it won't connect to your server!","title":"Step 4"},{"location":"ArcMap/#step-5","text":"In the next view, you will be able to see the layers of your WMTS freshly imported from the web. Double-click on the layer you want to use in ArcMap. And take a look at the result! We hope that this tutorial was very helpful!","title":"Step 5"},{"location":"MapServices/","text":"SDKs & Softwares Estimated reading time : 2 minutes Integrating Maps in your project Raster Tiles Vector Tiles Desktop / Software","title":"SDKs & Softwares"},{"location":"MapServices/#sdks-softwares","text":"Estimated reading time : 2 minutes","title":"SDKs &amp; Softwares"},{"location":"MapServices/#integrating-maps-in-your-project","text":"","title":"Integrating Maps in your project"},{"location":"MapServices/#raster-tiles","text":"","title":"Raster Tiles"},{"location":"MapServices/#vector-tiles","text":"","title":"Vector Tiles"},{"location":"MapServices/#desktop-software","text":"","title":"Desktop / Software"},{"location":"Overview-api/","text":"API doc & reference Estimated reading time : 1 minutes Get started using MapSaudi APIs MapSaudi's products help you put a map anywhere, search and route the planet. Here is the list of all our documentation. Rate Limits When you use our services with a basic plan, you will be rate limited. If you exceed your rate limit, you will receive a HTTP 429 Too Many Requests response from the API. If you want to increase you rate limits, please contact us. The following table list our current rate limit for each service. The rate limit is counted per account and IP. Syntax Description Header Title Maps 100 request per seconds Static Maps 1 request per seconds Elevation 1 request per seconds","title":"Overview"},{"location":"Overview-api/#api-doc-reference","text":"Estimated reading time : 1 minutes","title":"API doc &amp; reference"},{"location":"Overview-api/#get-started-using-mapsaudi-apis","text":"MapSaudi's products help you put a map anywhere, search and route the planet. Here is the list of all our documentation.","title":"Get started using MapSaudi APIs"},{"location":"Overview-api/#rate-limits","text":"When you use our services with a basic plan, you will be rate limited. If you exceed your rate limit, you will receive a HTTP 429 Too Many Requests response from the API. If you want to increase you rate limits, please contact us. The following table list our current rate limit for each service. The rate limit is counted per account and IP. Syntax Description Header Title Maps 100 request per seconds Static Maps 1 request per seconds Elevation 1 request per seconds","title":"Rate Limits"},{"location":"Overview-sdk/","text":"SDKs & Softwares Estimated reading time : 2 minutes Integrating Maps in your project MapSaudi exposes multiple Tile APIs to work with maps. To display maps, you need to use a Maps SDK. There are already great OpenSource Maps SDKs, and we'd rather spend our nights optimizing rendering efficiency to give you the fastest maps on the market than putting our name on a brand new Maps SDK which would pretty much do the same as the others. Raster Tiles Raster tiles were the first approach to displaying maps. These are small squares (usually 256px) which all together form a map. These squares are png format images that already contain your map with your style applied. This makes client side display faster. We would recommend Leaflet for raster tiles because it gives a better modular approach and has an excellent quality. Integrating MapSaudi maps with Leaflet is a question of seconds. Check out the available samples and integration-guide. Vector Tiles Vector tiles were created after the raster tiles. These are also squares, which together form a map. This time, these squares only contain the data, so you have to associate a style to it to finally have a map. This allows for more personalization and better interactions with the map. We would recommend using MapLibre GL for vector tiles. Integrating MapSaudi maps with MapLibre GL is quick & easy. Check out the available samples and integration-guide. Desktop / Software To use tiles in software, you need to know which Standard to apply. MapSaudi can talk to different standards. We expose TMS (also named Slippy-Map-Tile, or OpenStreetMap), and WMTS APIs. Also, WMS APIs can be opened for dynamic queries in our custom plans. If you are using Tableau or GIS software such as ArcGIS , ArcMap or QGIS , carry on reading as we have provided specific implementations for it. Integrate MapSaudi maps in QGIS version 2.0 or later with the WMTS endpoint provided by MapSaudi. Since QGIS 3.14, they are also supporting vector tiles ! Integrate MapSaudi maps in ArcGIS Desktop 10 or later with the WMTS endpoint provided by MapSaudi. Learn how with this tutorial: Integrate MapSaudi maps in Tableau Desktop 10 or later with the TMS files we provide for you.","title":"Overview"},{"location":"Overview-sdk/#sdks-softwares","text":"Estimated reading time : 2 minutes","title":"SDKs &amp; Softwares"},{"location":"Overview-sdk/#integrating-maps-in-your-project","text":"MapSaudi exposes multiple Tile APIs to work with maps. To display maps, you need to use a Maps SDK. There are already great OpenSource Maps SDKs, and we'd rather spend our nights optimizing rendering efficiency to give you the fastest maps on the market than putting our name on a brand new Maps SDK which would pretty much do the same as the others.","title":"Integrating Maps in your project"},{"location":"Overview-sdk/#raster-tiles","text":"Raster tiles were the first approach to displaying maps. These are small squares (usually 256px) which all together form a map. These squares are png format images that already contain your map with your style applied. This makes client side display faster. We would recommend Leaflet for raster tiles because it gives a better modular approach and has an excellent quality. Integrating MapSaudi maps with Leaflet is a question of seconds. Check out the available samples and integration-guide.","title":"Raster Tiles"},{"location":"Overview-sdk/#vector-tiles","text":"Vector tiles were created after the raster tiles. These are also squares, which together form a map. This time, these squares only contain the data, so you have to associate a style to it to finally have a map. This allows for more personalization and better interactions with the map. We would recommend using MapLibre GL for vector tiles. Integrating MapSaudi maps with MapLibre GL is quick & easy. Check out the available samples and integration-guide.","title":"Vector Tiles"},{"location":"Overview-sdk/#desktop-software","text":"To use tiles in software, you need to know which Standard to apply. MapSaudi can talk to different standards. We expose TMS (also named Slippy-Map-Tile, or OpenStreetMap), and WMTS APIs. Also, WMS APIs can be opened for dynamic queries in our custom plans. If you are using Tableau or GIS software such as ArcGIS , ArcMap or QGIS , carry on reading as we have provided specific implementations for it. Integrate MapSaudi maps in QGIS version 2.0 or later with the WMTS endpoint provided by MapSaudi. Since QGIS 3.14, they are also supporting vector tiles ! Integrate MapSaudi maps in ArcGIS Desktop 10 or later with the WMTS endpoint provided by MapSaudi. Learn how with this tutorial: Integrate MapSaudi maps in Tableau Desktop 10 or later with the TMS files we provide for you.","title":"Desktop / Software"},{"location":"QGIS/","text":"Integrating MapSaudi in QGIS with WMTS and XYZ Estimated reading time : 3 minutes Getting started The following tutorial has been done on the latest version of QGIS. The process is however the same for older versions. Thanks to these instructions, you could use a WMS source to use your different map layers in QGIS. Requirements Make sure that Browser view and Layers view are on. Click on the View tab on top of the QGIS window, then select Browser and Layers in the Panels section. XYZ Tutorial First you need your XYZ endpoint. Get it from MapSaudi Platform . That's what it looks like : https://basemaps.mapsaudi.com/your-style-id/{z}/{x}/{y}.png?access_token=your-MapSaudi-access-token \\___/ \\___________________/\\_____________/\\_________/ \\_/ \\____________________/ | | / / \\ | scheme domain style ID tiles coordinates image format authentication token You just need to replace your-MapSaudi-access-token by your real access token that you can find in your account and your-style-id by your style ID. You can find your style id in Leaflet section in Style Manager: Tip: You can also use our default styles. Step 1 To import your XYZ layer in QGIS, go in the Browser Panel , find XYZ Tiles , right click on it and click on New Connection... Step 2 A new window opens with settings to configure: Name : Name of the layer you will create. We will use MapSaudi Sunny for our example, but you are free to choose what ever you want. URL : Link for XYZ tile source. Max. Zoom Level : You can set the max zoom level to 20. Your new connection will be added in XYZ section on Browser Panel . step 3 Open your XYZ dropdown from you Browser Panel and find your new connection. Double click on your layer and voil\u00e0. WMTS Tutorial First you need your WMTS endpoint. Get it from MapSaudi Lab . The WMTS endpoint is very simple : https://basemaps.mapsaudi.com/your-style-id/wmts?access_token=your-MapSaudi-access-token \\___/ \\___________________/\\_____________/ \\____________________/ | | | | scheme domain style ID authentication token You just need to replace your-MapSaudi-access-token by your real access token that you can find in your account and your-style-id by your style ID. You can find your style id in Leaflet section in Style Manager: Tip: You can also use our default styles. Step 1 To import your WMTS in QGIS, go in the Browser Panel , find WMS , right click on it and click on New Connection... Step 2 A new window opens with settings to configure: Name : Name of the layer you will create. We will use MapSaudi for our example, but you are free to choose what ever you want. URL : Path to the WMTS file or HTTP link to import. We will use a HTTP link from MapSaudi here. Other settings are left empty in our case. Your new connection will be added in WMS section on Browser Panel . Step 3 Open your WMS dropdown from you Browser Panel and find your new connection. Double click on your layer and voil\u00e0.","title":"QGIS"},{"location":"QGIS/#integrating-mapsaudi-in-qgis-with-wmts-and-xyz","text":"Estimated reading time : 3 minutes","title":"Integrating MapSaudi in QGIS with WMTS and XYZ"},{"location":"QGIS/#getting-started","text":"The following tutorial has been done on the latest version of QGIS. The process is however the same for older versions. Thanks to these instructions, you could use a WMS source to use your different map layers in QGIS.","title":"Getting started"},{"location":"QGIS/#requirements","text":"Make sure that Browser view and Layers view are on. Click on the View tab on top of the QGIS window, then select Browser and Layers in the Panels section.","title":"Requirements"},{"location":"QGIS/#xyz-tutorial","text":"First you need your XYZ endpoint. Get it from MapSaudi Platform . That's what it looks like : https://basemaps.mapsaudi.com/your-style-id/{z}/{x}/{y}.png?access_token=your-MapSaudi-access-token \\___/ \\___________________/\\_____________/\\_________/ \\_/ \\____________________/ | | / / \\ | scheme domain style ID tiles coordinates image format authentication token You just need to replace your-MapSaudi-access-token by your real access token that you can find in your account and your-style-id by your style ID. You can find your style id in Leaflet section in Style Manager: Tip: You can also use our default styles.","title":"XYZ Tutorial"},{"location":"QGIS/#step-1","text":"To import your XYZ layer in QGIS, go in the Browser Panel , find XYZ Tiles , right click on it and click on New Connection...","title":"Step 1"},{"location":"QGIS/#step-2","text":"A new window opens with settings to configure: Name : Name of the layer you will create. We will use MapSaudi Sunny for our example, but you are free to choose what ever you want. URL : Link for XYZ tile source. Max. Zoom Level : You can set the max zoom level to 20. Your new connection will be added in XYZ section on Browser Panel .","title":"Step 2"},{"location":"QGIS/#step-3","text":"Open your XYZ dropdown from you Browser Panel and find your new connection. Double click on your layer and voil\u00e0.","title":"step 3"},{"location":"QGIS/#wmts-tutorial","text":"First you need your WMTS endpoint. Get it from MapSaudi Lab . The WMTS endpoint is very simple : https://basemaps.mapsaudi.com/your-style-id/wmts?access_token=your-MapSaudi-access-token \\___/ \\___________________/\\_____________/ \\____________________/ | | | | scheme domain style ID authentication token You just need to replace your-MapSaudi-access-token by your real access token that you can find in your account and your-style-id by your style ID. You can find your style id in Leaflet section in Style Manager: Tip: You can also use our default styles.","title":"WMTS Tutorial"},{"location":"QGIS/#step-1_1","text":"To import your WMTS in QGIS, go in the Browser Panel , find WMS , right click on it and click on New Connection...","title":"Step 1"},{"location":"QGIS/#step-2_1","text":"A new window opens with settings to configure: Name : Name of the layer you will create. We will use MapSaudi for our example, but you are free to choose what ever you want. URL : Path to the WMTS file or HTTP link to import. We will use a HTTP link from MapSaudi here. Other settings are left empty in our case. Your new connection will be added in WMS section on Browser Panel .","title":"Step 2"},{"location":"QGIS/#step-3_1","text":"Open your WMS dropdown from you Browser Panel and find your new connection. Double click on your layer and voil\u00e0.","title":"Step 3"},{"location":"Leaflet/Add-Geometry/","text":"Add geometry Estimated reading time : 1 minutes Check out this code sample that uses the Leaflet library to add a geometry from GeoJSON onto your map. <html> <head> <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.8.0/dist/leaflet.css\" /> <script src=\"https://unpkg.com/leaflet@1.8.0/dist/leaflet.js\"></script> <style> body { margin: 0; padding: 0; } #map { min-height: 500px; height: 100%; width: 100%; } </style> </head> <body> <div id=\"map\"></div> <script> // Don't forget to replace <YOUR_ACCESS_TOKEN> by your real access token ! const accessToken = '<YOUR_ACCESS_TOKEN>'; const map = L.map('map').setView([48.8534, 2.3488], 11); L.tileLayer( `https://tile.jawg.io/jawg-dark/{z}/{x}/{y}.png?access-token=${accessToken}`, { attribution: '<a href=\"http://jawg.io\" title=\"Tiles Courtesy of Jawg Maps\" target=\"_blank\" class=\"jawg-attrib\">&copy; <b>Jawg</b>Maps</a> | <a href=\"https://www.openstreetmap.org/copyright\" title=\"OpenStreetMap is open data licensed under ODbL\" target=\"_blank\" class=\"osm-attrib\">&copy; OSM contributors</a>', maxZoom: 22 } ).addTo(map); const geoJsonFeature = { type: 'Feature', properties: {}, geometry: { type: 'LineString', coordinates: [ [2.319887, 48.90046], [2.329981, 48.901163], [2.38515, 48.902008], [2.394906, 48.898444], [2.397627, 48.894578], [2.398846, 48.887109], [2.408308, 48.880409], [2.41327, 48.872892], [2.413838, 48.864376], [2.416341, 48.849234], [2.412246, 48.834539], [2.422139, 48.835798], [2.41939, 48.842577], [2.42813, 48.841528], [2.447699, 48.844818], [2.463438, 48.842089], [2.467426, 48.838891], [2.467582, 48.833133], [2.462696, 48.81906], [2.458705, 48.81714], [2.438448, 48.818232], [2.421462, 48.824054], [2.406032, 48.827615], [2.390939, 48.826079], [2.379296, 48.821214], [2.363947, 48.816314], [2.345958, 48.816036], [2.331898, 48.817011], [2.332461, 48.818247], [2.292196, 48.827142], [2.279052, 48.83249], [2.272793, 48.82792], [2.263174, 48.83398], [2.255144, 48.83481], [2.251709, 48.838822], [2.250612, 48.845555], [2.239978, 48.849702], [2.224219, 48.853517], [2.228225, 48.865183], [2.231736, 48.869069], [2.245678, 48.876435], [2.25541, 48.874264], [2.258467, 48.880387], [2.277487, 48.877968], [2.282327, 48.883923], [2.291507, 48.889472], [2.319887, 48.90046] ], }, }; L.geoJSON(geoJsonFeature).addTo(map); </script> </body> </html>","title":"Add geometry"},{"location":"Leaflet/Add-Geometry/#add-geometry","text":"Estimated reading time : 1 minutes Check out this code sample that uses the Leaflet library to add a geometry from GeoJSON onto your map. <html> <head> <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.8.0/dist/leaflet.css\" /> <script src=\"https://unpkg.com/leaflet@1.8.0/dist/leaflet.js\"></script> <style> body { margin: 0; padding: 0; } #map { min-height: 500px; height: 100%; width: 100%; } </style> </head> <body> <div id=\"map\"></div> <script> // Don't forget to replace <YOUR_ACCESS_TOKEN> by your real access token ! const accessToken = '<YOUR_ACCESS_TOKEN>'; const map = L.map('map').setView([48.8534, 2.3488], 11); L.tileLayer( `https://tile.jawg.io/jawg-dark/{z}/{x}/{y}.png?access-token=${accessToken}`, { attribution: '<a href=\"http://jawg.io\" title=\"Tiles Courtesy of Jawg Maps\" target=\"_blank\" class=\"jawg-attrib\">&copy; <b>Jawg</b>Maps</a> | <a href=\"https://www.openstreetmap.org/copyright\" title=\"OpenStreetMap is open data licensed under ODbL\" target=\"_blank\" class=\"osm-attrib\">&copy; OSM contributors</a>', maxZoom: 22 } ).addTo(map); const geoJsonFeature = { type: 'Feature', properties: {}, geometry: { type: 'LineString', coordinates: [ [2.319887, 48.90046], [2.329981, 48.901163], [2.38515, 48.902008], [2.394906, 48.898444], [2.397627, 48.894578], [2.398846, 48.887109], [2.408308, 48.880409], [2.41327, 48.872892], [2.413838, 48.864376], [2.416341, 48.849234], [2.412246, 48.834539], [2.422139, 48.835798], [2.41939, 48.842577], [2.42813, 48.841528], [2.447699, 48.844818], [2.463438, 48.842089], [2.467426, 48.838891], [2.467582, 48.833133], [2.462696, 48.81906], [2.458705, 48.81714], [2.438448, 48.818232], [2.421462, 48.824054], [2.406032, 48.827615], [2.390939, 48.826079], [2.379296, 48.821214], [2.363947, 48.816314], [2.345958, 48.816036], [2.331898, 48.817011], [2.332461, 48.818247], [2.292196, 48.827142], [2.279052, 48.83249], [2.272793, 48.82792], [2.263174, 48.83398], [2.255144, 48.83481], [2.251709, 48.838822], [2.250612, 48.845555], [2.239978, 48.849702], [2.224219, 48.853517], [2.228225, 48.865183], [2.231736, 48.869069], [2.245678, 48.876435], [2.25541, 48.874264], [2.258467, 48.880387], [2.277487, 48.877968], [2.282327, 48.883923], [2.291507, 48.889472], [2.319887, 48.90046] ], }, }; L.geoJSON(geoJsonFeature).addTo(map); </script> </body> </html>","title":"Add geometry"},{"location":"Leaflet/Add-a-marker/","text":"Add a marker Estimated reading time : 1 minutes Check out this code sample that uses the Leaflet library to add a marker from GeoJSON onto your map. <html> <head> <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.5.0/leaflet.css\" /> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.5.0/leaflet-src.js\"></script> <style> body { margin: 0; padding: 0; } #map { min-height: 500px; height: 100%; width: 100%; } </style> </head> <body> <div id=\"map\"></div> <!-- JavaScript --> <script> // Don't forget to replace <YOUR_ACCESS_TOKEN> by your real access token ! const accessToken = '<YOUR_ACCESS_TOKEN>'; const map = L.map('map').setView([48.852966, 2.349902], 12); L.tileLayer( `https://tile.jawg.io/jawg-terrain/{z}/{x}/{y}.png?access-token=${accessToken}`, { attribution: '<a href=\"http://jawg.io\" title=\"Tiles Courtesy of Jawg Maps\" target=\"_blank\" class=\"jawg-attrib\">&copy; <b>Jawg</b>Maps</a> | <a href=\"https://www.openstreetmap.org/copyright\" title=\"OpenStreetMap is open data licensed under ODbL\" target=\"_blank\" class=\"osm-attrib\">&copy; OSM contributors</a>', maxZoom: 22 } ).addTo(map); // This add a marker with the default icon L.marker([48.852966, 2.349902]).addTo(map); // Marker with custom icon L.marker([48.858093, 2.294694], { icon: L.icon({ iconUrl: 'https://www.jawg.io/docs/images/icons/eiffel-tower.png', iconSize: [50, 50] }) }).addTo(map); </script> </body> </html>","title":"Add a marker"},{"location":"Leaflet/Add-a-marker/#add-a-marker","text":"Estimated reading time : 1 minutes Check out this code sample that uses the Leaflet library to add a marker from GeoJSON onto your map. <html> <head> <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.5.0/leaflet.css\" /> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.5.0/leaflet-src.js\"></script> <style> body { margin: 0; padding: 0; } #map { min-height: 500px; height: 100%; width: 100%; } </style> </head> <body> <div id=\"map\"></div> <!-- JavaScript --> <script> // Don't forget to replace <YOUR_ACCESS_TOKEN> by your real access token ! const accessToken = '<YOUR_ACCESS_TOKEN>'; const map = L.map('map').setView([48.852966, 2.349902], 12); L.tileLayer( `https://tile.jawg.io/jawg-terrain/{z}/{x}/{y}.png?access-token=${accessToken}`, { attribution: '<a href=\"http://jawg.io\" title=\"Tiles Courtesy of Jawg Maps\" target=\"_blank\" class=\"jawg-attrib\">&copy; <b>Jawg</b>Maps</a> | <a href=\"https://www.openstreetmap.org/copyright\" title=\"OpenStreetMap is open data licensed under ODbL\" target=\"_blank\" class=\"osm-attrib\">&copy; OSM contributors</a>', maxZoom: 22 } ).addTo(map); // This add a marker with the default icon L.marker([48.852966, 2.349902]).addTo(map); // Marker with custom icon L.marker([48.858093, 2.294694], { icon: L.icon({ iconUrl: 'https://www.jawg.io/docs/images/icons/eiffel-tower.png', iconSize: [50, 50] }) }).addTo(map); </script> </body> </html>","title":"Add a marker"},{"location":"Leaflet/Change-language/","text":"Change the language of your map Estimated reading time : 1 minutes Check out this code sample that uses the Leaflet library to change the language on your map. <html> <head> <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.8.0/dist/leaflet.css\" /> <script src=\"https://unpkg.com/leaflet@1.8.0/dist/leaflet.js\"></script> <style> body { margin: 0; padding: 0; } #map { min-height: 500px; height: 100%; width: 100%; } select { z-index: 1000; position: absolute; top: 5px; right: 5px; padding: 5px; background: white; } </style> </head> <body> <div id=\"map\"> <select id=\"languages\"> <option value=\"en\">English</option> <option value=\"fr\">French</option> <option value=\"it\">Italian</option> <option value=\"es\">Spanish</option> <option value=\"de\">German</option> <option value=\"nl\">Dutch</option> <option value=\"zh\">Chinese</option> </select> </div> <!-- JavaScript --> <script> // Don't forget to replace <YOUR_ACCESS_TOKEN> by your real access token ! const accessToken = '<YOUR_ACCESS_TOKEN>'; const map = L.map('map').setView([48.7965913, 2.3210938], 3); const layer = L.tileLayer( `https://tile.jawg.io/jawg-dark/{z}/{x}/{y}.png?lang=en&access-token=${accessToken}`, { attribution: '<a href=\"http://jawg.io\" title=\"Tiles Courtesy of Jawg Maps\" target=\"_blank\" class=\"jawg-attrib\">&copy; <b>Jawg</b>Maps</a> | <a href=\"https://www.openstreetmap.org/copyright\" title=\"OpenStreetMap is open data licensed under ODbL\" target=\"_blank\" class=\"osm-attrib\">&copy; OSM contributors</a>', maxZoom: 22, } ).addTo(map); document .getElementById('languages') .addEventListener('change', event => { const language = event.target.value; layer.setUrl(`https://tile.jawg.io/jawg-dark/{z}/{x}/{y}.png?lang=${language}&access-token=${accessToken}`); }); </script> </body> </html>","title":"Change language"},{"location":"Leaflet/Change-language/#change-the-language-of-your-map","text":"Estimated reading time : 1 minutes Check out this code sample that uses the Leaflet library to change the language on your map. <html> <head> <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.8.0/dist/leaflet.css\" /> <script src=\"https://unpkg.com/leaflet@1.8.0/dist/leaflet.js\"></script> <style> body { margin: 0; padding: 0; } #map { min-height: 500px; height: 100%; width: 100%; } select { z-index: 1000; position: absolute; top: 5px; right: 5px; padding: 5px; background: white; } </style> </head> <body> <div id=\"map\"> <select id=\"languages\"> <option value=\"en\">English</option> <option value=\"fr\">French</option> <option value=\"it\">Italian</option> <option value=\"es\">Spanish</option> <option value=\"de\">German</option> <option value=\"nl\">Dutch</option> <option value=\"zh\">Chinese</option> </select> </div> <!-- JavaScript --> <script> // Don't forget to replace <YOUR_ACCESS_TOKEN> by your real access token ! const accessToken = '<YOUR_ACCESS_TOKEN>'; const map = L.map('map').setView([48.7965913, 2.3210938], 3); const layer = L.tileLayer( `https://tile.jawg.io/jawg-dark/{z}/{x}/{y}.png?lang=en&access-token=${accessToken}`, { attribution: '<a href=\"http://jawg.io\" title=\"Tiles Courtesy of Jawg Maps\" target=\"_blank\" class=\"jawg-attrib\">&copy; <b>Jawg</b>Maps</a> | <a href=\"https://www.openstreetmap.org/copyright\" title=\"OpenStreetMap is open data licensed under ODbL\" target=\"_blank\" class=\"osm-attrib\">&copy; OSM contributors</a>', maxZoom: 22, } ).addTo(map); document .getElementById('languages') .addEventListener('change', event => { const language = event.target.value; layer.setUrl(`https://tile.jawg.io/jawg-dark/{z}/{x}/{y}.png?lang=${language}&access-token=${accessToken}`); }); </script> </body> </html>","title":"Change the language of your map"},{"location":"Leaflet/Change-style/","text":"Use a custom style from MapSaudi Platform Estimated reading time : 1 minutes Switch between the default Jawg styles for your map using this code sample that uses the Leaflet library. <html> <head> <link href=\"https://unpkg.com/leaflet@1.8.0/dist/leaflet.css\" rel=\"stylesheet\" /> <script src=\"https://unpkg.com/leaflet@1.8.0/dist/leaflet.js\"></script> <style> body { margin: 0; padding: 0; } #map { min-height: 500px; height: 100%; width: 100%; } </style> </head> <body> <div id=\"map\"></div> <script> // Don't forget to replace <YOUR_ACCESS_TOKEN> by your real access token ! const accessToken = '<YOUR_ACCESS_TOKEN>'; // Set your custom style ID. To get your custom style ID see https://www.jawg.io/docs/maps#get-custom-style-id const styleId = '<YOUR_CUSTOM_STYLE_ID>'; const map = L.map('map').setView([30.445209, -91.177565], 14); L.tileLayer( `https://tile.jawg.io/${styleId}/{z}/{x}/{y}.png?access-token=${accessToken}`, { attribution: '<a href=\"http://jawg.io\" title=\"Tiles Courtesy of Jawg Maps\" target=\"_blank\" class=\"jawg-attrib\">&copy; <b>Jawg</b>Maps</a> | <a href=\"https://www.openstreetmap.org/copyright\" title=\"OpenStreetMap is open data licensed under ODbL\" target=\"_blank\" class=\"osm-attrib\">&copy; OSM contributors</a>', maxZoom: 22 } ).addTo(map); </script> </body> </html>","title":"Change style"},{"location":"Leaflet/Change-style/#use-a-custom-style-from-mapsaudi-platform","text":"Estimated reading time : 1 minutes Switch between the default Jawg styles for your map using this code sample that uses the Leaflet library. <html> <head> <link href=\"https://unpkg.com/leaflet@1.8.0/dist/leaflet.css\" rel=\"stylesheet\" /> <script src=\"https://unpkg.com/leaflet@1.8.0/dist/leaflet.js\"></script> <style> body { margin: 0; padding: 0; } #map { min-height: 500px; height: 100%; width: 100%; } </style> </head> <body> <div id=\"map\"></div> <script> // Don't forget to replace <YOUR_ACCESS_TOKEN> by your real access token ! const accessToken = '<YOUR_ACCESS_TOKEN>'; // Set your custom style ID. To get your custom style ID see https://www.jawg.io/docs/maps#get-custom-style-id const styleId = '<YOUR_CUSTOM_STYLE_ID>'; const map = L.map('map').setView([30.445209, -91.177565], 14); L.tileLayer( `https://tile.jawg.io/${styleId}/{z}/{x}/{y}.png?access-token=${accessToken}`, { attribution: '<a href=\"http://jawg.io\" title=\"Tiles Courtesy of Jawg Maps\" target=\"_blank\" class=\"jawg-attrib\">&copy; <b>Jawg</b>Maps</a> | <a href=\"https://www.openstreetmap.org/copyright\" title=\"OpenStreetMap is open data licensed under ODbL\" target=\"_blank\" class=\"osm-attrib\">&copy; OSM contributors</a>', maxZoom: 22 } ).addTo(map); </script> </body> </html>","title":"Use a custom style from MapSaudi Platform"},{"location":"Leaflet/Display-a-popup/","text":"Display a popup Estimated reading time : 1 minutes Check out this code sample that uses the Leaflet library to add a marker from GeoJSON onto your map. <html> <head> <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.8.0/dist/leaflet.css\" /> <script src=\"https://unpkg.com/leaflet@1.8.0/dist/leaflet.js\"></script> <style> body { margin: 0; padding: 0; } #map { min-height: 500px; height: 100%; width: 100%; } </style> </head> <body> <div id=\"map\"></div> <script> // Don't forget to replace <YOUR_ACCESS_TOKEN> by your real access token ! const accessToken = '<YOUR_ACCESS_TOKEN>'; const map = L.map('map').setView([16.233131, -61.572646], 10); L.tileLayer( `https://tile.jawg.io/jawg-sunny/{z}/{x}/{y}.png?access-token=${accessToken}`, { attribution: '<a href=\"http://jawg.io\" title=\"Tiles Courtesy of Jawg Maps\" target=\"_blank\" class=\"jawg-attrib\">&copy; <b>Jawg</b>Maps</a> | <a href=\"https://www.openstreetmap.org/copyright\" title=\"OpenStreetMap is open data licensed under ODbL\" target=\"_blank\" class=\"osm-attrib\">&copy; OSM contributors</a>', maxZoom: 22 } ).addTo(map); const marker = L.marker([15.966636, -61.653889]).addTo(map); marker.bindPopup('<b>A popup that is shown when you click on a marker</b>'); // Basic popup definition L.popup({ closeOnClick: false }) .setLatLng([16.263131, -61.602646]) .setContent('<b>Hello world!</b><br/> I am a popup.') .addTo(map); </script> </body> </html>","title":"Display a popup"},{"location":"Leaflet/Display-a-popup/#display-a-popup","text":"Estimated reading time : 1 minutes Check out this code sample that uses the Leaflet library to add a marker from GeoJSON onto your map. <html> <head> <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.8.0/dist/leaflet.css\" /> <script src=\"https://unpkg.com/leaflet@1.8.0/dist/leaflet.js\"></script> <style> body { margin: 0; padding: 0; } #map { min-height: 500px; height: 100%; width: 100%; } </style> </head> <body> <div id=\"map\"></div> <script> // Don't forget to replace <YOUR_ACCESS_TOKEN> by your real access token ! const accessToken = '<YOUR_ACCESS_TOKEN>'; const map = L.map('map').setView([16.233131, -61.572646], 10); L.tileLayer( `https://tile.jawg.io/jawg-sunny/{z}/{x}/{y}.png?access-token=${accessToken}`, { attribution: '<a href=\"http://jawg.io\" title=\"Tiles Courtesy of Jawg Maps\" target=\"_blank\" class=\"jawg-attrib\">&copy; <b>Jawg</b>Maps</a> | <a href=\"https://www.openstreetmap.org/copyright\" title=\"OpenStreetMap is open data licensed under ODbL\" target=\"_blank\" class=\"osm-attrib\">&copy; OSM contributors</a>', maxZoom: 22 } ).addTo(map); const marker = L.marker([15.966636, -61.653889]).addTo(map); marker.bindPopup('<b>A popup that is shown when you click on a marker</b>'); // Basic popup definition L.popup({ closeOnClick: false }) .setLatLng([16.263131, -61.602646]) .setContent('<b>Hello world!</b><br/> I am a popup.') .addTo(map); </script> </body> </html>","title":"Display a popup"},{"location":"Leaflet/Quickstart/","text":"Leaflet (raster map) Estimated reading time : 2 minutes Prerequisite For all of our examples, you will need: An API key and MapSaudi account ( from the platform ), Basic knowledge in JavaScript and HTML, One style (default or custom style) Get the library There are several ways to get this library: from the github repository ( github.com/Leaflet/Leaflet ) from npmjs.com (package name: leaflet ) from a CDN (e.g unpkg.com) <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.8.0/dist/leaflet.css\" /> <script src=\"https://unpkg.com/leaflet@1.8.0/dist/leaflet.js\"></script> Attribution Your map must display the following links: MapSaudi and \u00a9 OpenStreetMap . This is our attribution template: <a href=\"https://basemaps.mapsaudi.com/\" title=\"Tiles Courtesy of MapSaudi Maps\" target=\"_blank\" class=\"jawg-attrib\" >&copy; <b>MapSaudi</b>Maps</a> | <a href=\"https://www.openstreetmap.org/copyright\" title=\"OpenStreetMap is open data licensed under ODbL\" target=\"_blank\" class=\"osm-attrib\" >&copy; OSM contributors</a> Our examples simple-map : Simple map integration add-marker : Add a marker on your map add-geometry : Add a geometry from GeoJSON on your map add-popup : Add a popup on your map change-language : Change your map's language change-style : Change your map style (with our default styles) custom-style : Use a custom style from MapSaudi Lab maplibre-gl-leaflet : Use vector tiles with maplibre-gl-leaflet","title":"Quickstart"},{"location":"Leaflet/Quickstart/#leaflet-raster-map","text":"Estimated reading time : 2 minutes","title":"Leaflet (raster map)"},{"location":"Leaflet/Quickstart/#prerequisite","text":"For all of our examples, you will need: An API key and MapSaudi account ( from the platform ), Basic knowledge in JavaScript and HTML, One style (default or custom style)","title":"Prerequisite"},{"location":"Leaflet/Quickstart/#get-the-library","text":"There are several ways to get this library: from the github repository ( github.com/Leaflet/Leaflet ) from npmjs.com (package name: leaflet ) from a CDN (e.g unpkg.com) <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.8.0/dist/leaflet.css\" /> <script src=\"https://unpkg.com/leaflet@1.8.0/dist/leaflet.js\"></script>","title":"Get the library"},{"location":"Leaflet/Quickstart/#attribution","text":"Your map must display the following links: MapSaudi and \u00a9 OpenStreetMap . This is our attribution template: <a href=\"https://basemaps.mapsaudi.com/\" title=\"Tiles Courtesy of MapSaudi Maps\" target=\"_blank\" class=\"jawg-attrib\" >&copy; <b>MapSaudi</b>Maps</a> | <a href=\"https://www.openstreetmap.org/copyright\" title=\"OpenStreetMap is open data licensed under ODbL\" target=\"_blank\" class=\"osm-attrib\" >&copy; OSM contributors</a>","title":"Attribution"},{"location":"Leaflet/Quickstart/#our-examples","text":"simple-map : Simple map integration add-marker : Add a marker on your map add-geometry : Add a geometry from GeoJSON on your map add-popup : Add a popup on your map change-language : Change your map's language change-style : Change your map style (with our default styles) custom-style : Use a custom style from MapSaudi Lab maplibre-gl-leaflet : Use vector tiles with maplibre-gl-leaflet","title":"Our examples"},{"location":"Leaflet/Simple-map/","text":"Simple map integration Estimated reading time : 1 minutes Check out this code sample that uses the Leaflet library to integrate a simple map onto your site. <html> <head> <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.8.0/dist/leaflet.css\" /> <script src=\"https://unpkg.com/leaflet@1.8.0/dist/leaflet.js\"></script> <style> body { margin: 0; padding: 0; } #map { min-height: 500px; height: 100%; width: 100%; } </style> </head> <body> <div id=\"map\"></div> <script> // Don't forget to replace <YOUR_ACCESS_TOKEN> by your real access token ! const accessToken = '<YOUR_ACCESS_TOKEN>'; const map = L.map('map').setView([48.7965913, 2.3210938], 3); L.tileLayer( `https://tile.jawg.io/jawg-sunny/{z}/{x}/{y}.png?access-token=${accessToken}`, { attribution: '<a href=\"http://jawg.io\" title=\"Tiles Courtesy of Jawg Maps\" target=\"_blank\" class=\"jawg-attrib\">&copy; <b>Jawg</b>Maps</a> | <a href=\"https://www.openstreetmap.org/copyright\" title=\"OpenStreetMap is open data licensed under ODbL\" target=\"_blank\" class=\"osm-attrib\">&copy; OSM contributors</a>', maxZoom: 22 } ).addTo(map); </script> </body> </html>","title":"Simple map"},{"location":"Leaflet/Simple-map/#simple-map-integration","text":"Estimated reading time : 1 minutes Check out this code sample that uses the Leaflet library to integrate a simple map onto your site. <html> <head> <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.8.0/dist/leaflet.css\" /> <script src=\"https://unpkg.com/leaflet@1.8.0/dist/leaflet.js\"></script> <style> body { margin: 0; padding: 0; } #map { min-height: 500px; height: 100%; width: 100%; } </style> </head> <body> <div id=\"map\"></div> <script> // Don't forget to replace <YOUR_ACCESS_TOKEN> by your real access token ! const accessToken = '<YOUR_ACCESS_TOKEN>'; const map = L.map('map').setView([48.7965913, 2.3210938], 3); L.tileLayer( `https://tile.jawg.io/jawg-sunny/{z}/{x}/{y}.png?access-token=${accessToken}`, { attribution: '<a href=\"http://jawg.io\" title=\"Tiles Courtesy of Jawg Maps\" target=\"_blank\" class=\"jawg-attrib\">&copy; <b>Jawg</b>Maps</a> | <a href=\"https://www.openstreetmap.org/copyright\" title=\"OpenStreetMap is open data licensed under ODbL\" target=\"_blank\" class=\"osm-attrib\">&copy; OSM contributors</a>', maxZoom: 22 } ).addTo(map); </script> </body> </html>","title":"Simple map integration"},{"location":"Leaflet/Use-a-custom-style/","text":"Use a custom style Estimated reading time : 1 minutes Check out this code sample that uses maplibre-gl-leaflet add vector tiles to your map. <html> <head> <link href=\"https://unpkg.com/leaflet@1.8.0/dist/leaflet.css\" rel=\"stylesheet\" /> <script src=\"https://unpkg.com/leaflet@1.8.0/dist/leaflet.js\"></script> <style> body { margin: 0; padding: 0; } #map { min-height: 500px; height: 100%; width: 100%; } </style> </head> <body> <div id=\"map\"></div> <script> // Don't forget to replace <YOUR_ACCESS_TOKEN> by your real access token ! const accessToken = '<YOUR_ACCESS_TOKEN>'; // Set your custom style ID. To get your custom style ID see https://www.jawg.io/docs/maps#get-custom-style-id const styleId = '<YOUR_CUSTOM_STYLE_ID>'; const map = L.map('map').setView([30.445209, -91.177565], 14); L.tileLayer( `https://tile.jawg.io/${styleId}/{z}/{x}/{y}.png?access-token=${accessToken}`, { attribution: '<a href=\"http://jawg.io\" title=\"Tiles Courtesy of Jawg Maps\" target=\"_blank\" class=\"jawg-attrib\">&copy; <b>Jawg</b>Maps</a> | <a href=\"https://www.openstreetmap.org/copyright\" title=\"OpenStreetMap is open data licensed under ODbL\" target=\"_blank\" class=\"osm-attrib\">&copy; OSM contributors</a>', maxZoom: 22 } ).addTo(map); </script> </body> </html>","title":"Use a custom style"},{"location":"Leaflet/Use-a-custom-style/#use-a-custom-style","text":"Estimated reading time : 1 minutes Check out this code sample that uses maplibre-gl-leaflet add vector tiles to your map. <html> <head> <link href=\"https://unpkg.com/leaflet@1.8.0/dist/leaflet.css\" rel=\"stylesheet\" /> <script src=\"https://unpkg.com/leaflet@1.8.0/dist/leaflet.js\"></script> <style> body { margin: 0; padding: 0; } #map { min-height: 500px; height: 100%; width: 100%; } </style> </head> <body> <div id=\"map\"></div> <script> // Don't forget to replace <YOUR_ACCESS_TOKEN> by your real access token ! const accessToken = '<YOUR_ACCESS_TOKEN>'; // Set your custom style ID. To get your custom style ID see https://www.jawg.io/docs/maps#get-custom-style-id const styleId = '<YOUR_CUSTOM_STYLE_ID>'; const map = L.map('map').setView([30.445209, -91.177565], 14); L.tileLayer( `https://tile.jawg.io/${styleId}/{z}/{x}/{y}.png?access-token=${accessToken}`, { attribution: '<a href=\"http://jawg.io\" title=\"Tiles Courtesy of Jawg Maps\" target=\"_blank\" class=\"jawg-attrib\">&copy; <b>Jawg</b>Maps</a> | <a href=\"https://www.openstreetmap.org/copyright\" title=\"OpenStreetMap is open data licensed under ODbL\" target=\"_blank\" class=\"osm-attrib\">&copy; OSM contributors</a>', maxZoom: 22 } ).addTo(map); </script> </body> </html>","title":"Use a custom style"},{"location":"Leaflet/Use-maplibre-gl-leaflet/","text":"Use vector tiles with maplibre-gl-leaflet Estimated reading time : 1 minutes Check out this code sample that uses the Leaflet library to add a marker from GeoJSON onto your map. <!DOCTYPE html> <html> <head> <meta charset=\"utf-8\"> <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.8.0/dist/leaflet.css\" /> <script src=\"https://unpkg.com/leaflet@1.8.0/dist/leaflet.js\"></script> <!-- Add maplibre-gl-js --> <link href='https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.css' rel='stylesheet' /> <script src='https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.js'></script> <!-- Add maplibre-gl-leaflet --> <script src=\"https://unpkg.com/@maplibre/maplibre-gl-leaflet@0.0.17/leaflet-maplibre-gl.js\"></script> <style> body { margin: 0; padding: 0; } #map { min-height: 500px; height: 100%; width: 100%; } </style> </head> <body> <div id=\"map\"></div> <script> // Don't forget to replace <YOUR_ACCESS_TOKEN> by your real access token ! const accessToken = '<YOUR_ACCESS_TOKEN>'; const map = L.map('map', { maxZoom: 22 }).setView([48.8590, 2.3435], 13); L.marker([48.8584, 2.2945], { icon: L.icon({ iconUrl: 'https://www.jawg.io/docs/images/icons/eiffel-tower.png', iconSize: [50, 50], iconAnchor: [25, 50], popupAnchor: [0, -57] }) }) .bindPopup(\"Hello <b>Leaflet GL</b>!\") .addTo(map) .openPopup(); var gl = L.maplibreGL({ style: `https://api.jawg.io/styles/jawg-streets.json?access-token=${accessToken}`, attribution: '<a href=\"http://jawg.io\" title=\"Tiles Courtesy of Jawg Maps\" target=\"_blank\" class=\"jawg-attrib\">&copy; <b>Jawg</b>Maps</a> | <a href=\"https://www.openstreetmap.org/copyright\" title=\"OpenStreetMap is open data licensed under ODbL\" target=\"_blank\" class=\"osm-attrib\">&copy; OSM contributors</a>', maxZoom: 22 }).addTo(map); </script> </body> </html>","title":"Use maplibre-gl-leaflet"},{"location":"Leaflet/Use-maplibre-gl-leaflet/#use-vector-tiles-with-maplibre-gl-leaflet","text":"Estimated reading time : 1 minutes Check out this code sample that uses the Leaflet library to add a marker from GeoJSON onto your map. <!DOCTYPE html> <html> <head> <meta charset=\"utf-8\"> <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.8.0/dist/leaflet.css\" /> <script src=\"https://unpkg.com/leaflet@1.8.0/dist/leaflet.js\"></script> <!-- Add maplibre-gl-js --> <link href='https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.css' rel='stylesheet' /> <script src='https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.js'></script> <!-- Add maplibre-gl-leaflet --> <script src=\"https://unpkg.com/@maplibre/maplibre-gl-leaflet@0.0.17/leaflet-maplibre-gl.js\"></script> <style> body { margin: 0; padding: 0; } #map { min-height: 500px; height: 100%; width: 100%; } </style> </head> <body> <div id=\"map\"></div> <script> // Don't forget to replace <YOUR_ACCESS_TOKEN> by your real access token ! const accessToken = '<YOUR_ACCESS_TOKEN>'; const map = L.map('map', { maxZoom: 22 }).setView([48.8590, 2.3435], 13); L.marker([48.8584, 2.2945], { icon: L.icon({ iconUrl: 'https://www.jawg.io/docs/images/icons/eiffel-tower.png', iconSize: [50, 50], iconAnchor: [25, 50], popupAnchor: [0, -57] }) }) .bindPopup(\"Hello <b>Leaflet GL</b>!\") .addTo(map) .openPopup(); var gl = L.maplibreGL({ style: `https://api.jawg.io/styles/jawg-streets.json?access-token=${accessToken}`, attribution: '<a href=\"http://jawg.io\" title=\"Tiles Courtesy of Jawg Maps\" target=\"_blank\" class=\"jawg-attrib\">&copy; <b>Jawg</b>Maps</a> | <a href=\"https://www.openstreetmap.org/copyright\" title=\"OpenStreetMap is open data licensed under ODbL\" target=\"_blank\" class=\"osm-attrib\">&copy; OSM contributors</a>', maxZoom: 22 }).addTo(map); </script> </body> </html>","title":"Use vector tiles with maplibre-gl-leaflet"},{"location":"MapLibreJs/Add-Geometry/","text":"Add geometry Estimated reading time : 1 minutes Check out this code sample that uses the MapLibre GL JS library to add a geometry from GeoJSON onto your map. <!DOCTYPE html> <html> <head> <meta charset=UTF-8> <link href=\"https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.css\" rel=\"stylesheet\" /> <script src=\"https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.js\"></script> <style> body { margin: 0; padding: 0; } #map { min-height: 500px; height: 100%; width: 100%; } </style> </head> <body> <div id=\"map\"></div> <script> // Don't forget to replace <YOUR_ACCESS_TOKEN> by your real access token! const accessToken = '<YOUR_ACCESS_TOKEN>'; const map = new maplibregl.Map({ container: 'map', style: `https://api.jawg.io/styles/jawg-dark.json?access-token=${accessToken}`, zoom: 10, center: [2.3488, 48.8534], hash: true, }).addControl(new maplibregl.NavigationControl(), 'top-right'); // This plugin is used for right to left languages maplibregl.setRTLTextPlugin('https://unpkg.com/@mapbox/mapbox-gl-rtl-text@0.2.3/mapbox-gl-rtl-text.min.js'); const geoJsonFeature = { type: 'Feature', properties: {}, geometry: { type: 'LineString', 'coordinates': [ [2.319887, 48.90046], [2.329981, 48.901163], [2.38515, 48.902008], [2.394906, 48.898444], [2.397627, 48.894578], [2.398846, 48.887109], [2.408308, 48.880409], [2.41327, 48.872892], [2.413838, 48.864376], [2.416341, 48.849234], [2.412246, 48.834539], [2.422139, 48.835798], [2.41939, 48.842577], [2.42813, 48.841528], [2.447699, 48.844818], [2.463438, 48.842089], [2.467426, 48.838891], [2.467582, 48.833133], [2.462696, 48.81906], [2.458705, 48.81714], [2.438448, 48.818232], [2.421462, 48.824054], [2.406032, 48.827615], [2.390939, 48.826079], [2.379296, 48.821214], [2.363947, 48.816314], [2.345958, 48.816036], [2.331898, 48.817011], [2.332461, 48.818247], [2.292196, 48.827142], [2.279052, 48.83249], [2.272793, 48.82792], [2.263174, 48.83398], [2.255144, 48.83481], [2.251709, 48.838822], [2.250612, 48.845555], [2.239978, 48.849702], [2.224219, 48.853517], [2.228225, 48.865183], [2.231736, 48.869069], [2.245678, 48.876435], [2.25541, 48.874264], [2.258467, 48.880387], [2.277487, 48.877968], [2.282327, 48.883923], [2.291507, 48.889472], [2.319887, 48.90046] ] }, }; map.on('load', function() { map.addLayer({ id: 'route', type: 'line', source: { type: 'geojson', data: geoJsonFeature, }, layout: { 'line-join': 'round', 'line-cap': 'round', }, paint: { 'line-color': 'steelblue', 'line-width': 4, }, }); }); </script> </body> </html>","title":"Add your data"},{"location":"MapLibreJs/Add-Geometry/#add-geometry","text":"Estimated reading time : 1 minutes Check out this code sample that uses the MapLibre GL JS library to add a geometry from GeoJSON onto your map. <!DOCTYPE html> <html> <head> <meta charset=UTF-8> <link href=\"https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.css\" rel=\"stylesheet\" /> <script src=\"https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.js\"></script> <style> body { margin: 0; padding: 0; } #map { min-height: 500px; height: 100%; width: 100%; } </style> </head> <body> <div id=\"map\"></div> <script> // Don't forget to replace <YOUR_ACCESS_TOKEN> by your real access token! const accessToken = '<YOUR_ACCESS_TOKEN>'; const map = new maplibregl.Map({ container: 'map', style: `https://api.jawg.io/styles/jawg-dark.json?access-token=${accessToken}`, zoom: 10, center: [2.3488, 48.8534], hash: true, }).addControl(new maplibregl.NavigationControl(), 'top-right'); // This plugin is used for right to left languages maplibregl.setRTLTextPlugin('https://unpkg.com/@mapbox/mapbox-gl-rtl-text@0.2.3/mapbox-gl-rtl-text.min.js'); const geoJsonFeature = { type: 'Feature', properties: {}, geometry: { type: 'LineString', 'coordinates': [ [2.319887, 48.90046], [2.329981, 48.901163], [2.38515, 48.902008], [2.394906, 48.898444], [2.397627, 48.894578], [2.398846, 48.887109], [2.408308, 48.880409], [2.41327, 48.872892], [2.413838, 48.864376], [2.416341, 48.849234], [2.412246, 48.834539], [2.422139, 48.835798], [2.41939, 48.842577], [2.42813, 48.841528], [2.447699, 48.844818], [2.463438, 48.842089], [2.467426, 48.838891], [2.467582, 48.833133], [2.462696, 48.81906], [2.458705, 48.81714], [2.438448, 48.818232], [2.421462, 48.824054], [2.406032, 48.827615], [2.390939, 48.826079], [2.379296, 48.821214], [2.363947, 48.816314], [2.345958, 48.816036], [2.331898, 48.817011], [2.332461, 48.818247], [2.292196, 48.827142], [2.279052, 48.83249], [2.272793, 48.82792], [2.263174, 48.83398], [2.255144, 48.83481], [2.251709, 48.838822], [2.250612, 48.845555], [2.239978, 48.849702], [2.224219, 48.853517], [2.228225, 48.865183], [2.231736, 48.869069], [2.245678, 48.876435], [2.25541, 48.874264], [2.258467, 48.880387], [2.277487, 48.877968], [2.282327, 48.883923], [2.291507, 48.889472], [2.319887, 48.90046] ] }, }; map.on('load', function() { map.addLayer({ id: 'route', type: 'line', source: { type: 'geojson', data: geoJsonFeature, }, layout: { 'line-join': 'round', 'line-cap': 'round', }, paint: { 'line-color': 'steelblue', 'line-width': 4, }, }); }); </script> </body> </html>","title":"Add geometry"},{"location":"MapLibreJs/Add-a-marker/","text":"Add a marker Estimated reading time : 1 minutes Check out this code sample that uses the MapLibre GL JS library to add a marker from GeoJSON onto your map. <!DOCTYPE html> <html> <head> <meta charset=UTF-8> <link href=\"https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.css\" rel=\"stylesheet\" /> <script src=\"https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.js\"></script> <style> body { margin: 0; padding: 0; } #map { min-height: 500px; height: 100%; width: 100%; } .marker { background-image: url('https://www.jawg.io/docs/images/icons/eiffel-tower@2x.png'); background-size: cover; width: 50px; height: 50px; cursor: pointer; } </style> </head> <body> <div id=\"map\"></div> <script> // Don't forget to replace <YOUR_ACCESS_TOKEN> by your real access token! const accessToken = '<YOUR_ACCESS_TOKEN>'; const map = new maplibregl.Map({ container: 'map', style: `https://api.jawg.io/styles/jawg-terrain.json?access-token=${accessToken}`, zoom: 11, center: [2.349902, 48.852966], }).addControl(new maplibregl.NavigationControl(), 'top-right'); // This plugin is used for right to left languages maplibregl.setRTLTextPlugin('https://unpkg.com/@mapbox/mapbox-gl-rtl-text@0.2.3/mapbox-gl-rtl-text.min.js'); // This add a marker with the default icon new maplibregl.Marker().setLngLat([2.349902, 48.852966]).addTo(map); // Marker with custom icon const el = document.createElement('div'); el.className = 'marker'; new maplibregl.Marker(el) .setLngLat([2.294694, 48.858093]) .addTo(map); </script> </body> </html>","title":"Add a marker"},{"location":"MapLibreJs/Add-a-marker/#add-a-marker","text":"Estimated reading time : 1 minutes Check out this code sample that uses the MapLibre GL JS library to add a marker from GeoJSON onto your map. <!DOCTYPE html> <html> <head> <meta charset=UTF-8> <link href=\"https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.css\" rel=\"stylesheet\" /> <script src=\"https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.js\"></script> <style> body { margin: 0; padding: 0; } #map { min-height: 500px; height: 100%; width: 100%; } .marker { background-image: url('https://www.jawg.io/docs/images/icons/eiffel-tower@2x.png'); background-size: cover; width: 50px; height: 50px; cursor: pointer; } </style> </head> <body> <div id=\"map\"></div> <script> // Don't forget to replace <YOUR_ACCESS_TOKEN> by your real access token! const accessToken = '<YOUR_ACCESS_TOKEN>'; const map = new maplibregl.Map({ container: 'map', style: `https://api.jawg.io/styles/jawg-terrain.json?access-token=${accessToken}`, zoom: 11, center: [2.349902, 48.852966], }).addControl(new maplibregl.NavigationControl(), 'top-right'); // This plugin is used for right to left languages maplibregl.setRTLTextPlugin('https://unpkg.com/@mapbox/mapbox-gl-rtl-text@0.2.3/mapbox-gl-rtl-text.min.js'); // This add a marker with the default icon new maplibregl.Marker().setLngLat([2.349902, 48.852966]).addTo(map); // Marker with custom icon const el = document.createElement('div'); el.className = 'marker'; new maplibregl.Marker(el) .setLngLat([2.294694, 48.858093]) .addTo(map); </script> </body> </html>","title":"Add a marker"},{"location":"MapLibreJs/Change-language/","text":"Change the language of your map Estimated reading time : 1 minutes Check out this code sample that uses the MapLibre GL JS library to change the language on your map. <!DOCTYPE html> <html> <head> <meta charset=UTF-8> <link href=\"https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.css\" rel=\"stylesheet\" /> <script src=\"https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.js\"></script> <style> body { margin: 0; padding: 0; } #map { min-height: 500px; height: 100%; width: 100%; } select { z-index: 1; position: absolute; top: 5px; left: 5px; padding: 5px; background: white; } </style> </head> <body> <div id=\"map\"> <select id=\"languages\"> <option value=\"en\">English</option> <option value=\"fr\">French</option> <option value=\"it\">Italian</option> <option value=\"es\">Spanish</option> <option value=\"de\">German</option> <option value=\"nl\">Dutch</option> <option value=\"zh\">Chinese</option> </select> </div> <script> // Don't forget to replace <YOUR_ACCESS_TOKEN> by your real access token! const accessToken = '<YOUR_ACCESS_TOKEN>'; const map = new maplibregl.Map({ container: 'map', style: `https://api.jawg.io/styles/jawg-dark.json?lang=en&access-token=${accessToken}`, zoom: 2, center: [2.3210938, 48.7965913], hash: true }) .addControl(new maplibregl.NavigationControl(), 'top-right'); // This plugin is used for right to left languages maplibregl.setRTLTextPlugin('https://unpkg.com/@mapbox/mapbox-gl-rtl-text@0.2.3/mapbox-gl-rtl-text.min.js'); map.on('load', function() { document .getElementById('languages') .addEventListener('change', function(event) { var language = event.target.value; map.setStyle(`https://api.jawg.io/styles/jawg-dark.json?lang=${language}&access-token=${accessToken}`); }); }); </script> </body> </html>","title":"Change language"},{"location":"MapLibreJs/Change-language/#change-the-language-of-your-map","text":"Estimated reading time : 1 minutes Check out this code sample that uses the MapLibre GL JS library to change the language on your map. <!DOCTYPE html> <html> <head> <meta charset=UTF-8> <link href=\"https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.css\" rel=\"stylesheet\" /> <script src=\"https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.js\"></script> <style> body { margin: 0; padding: 0; } #map { min-height: 500px; height: 100%; width: 100%; } select { z-index: 1; position: absolute; top: 5px; left: 5px; padding: 5px; background: white; } </style> </head> <body> <div id=\"map\"> <select id=\"languages\"> <option value=\"en\">English</option> <option value=\"fr\">French</option> <option value=\"it\">Italian</option> <option value=\"es\">Spanish</option> <option value=\"de\">German</option> <option value=\"nl\">Dutch</option> <option value=\"zh\">Chinese</option> </select> </div> <script> // Don't forget to replace <YOUR_ACCESS_TOKEN> by your real access token! const accessToken = '<YOUR_ACCESS_TOKEN>'; const map = new maplibregl.Map({ container: 'map', style: `https://api.jawg.io/styles/jawg-dark.json?lang=en&access-token=${accessToken}`, zoom: 2, center: [2.3210938, 48.7965913], hash: true }) .addControl(new maplibregl.NavigationControl(), 'top-right'); // This plugin is used for right to left languages maplibregl.setRTLTextPlugin('https://unpkg.com/@mapbox/mapbox-gl-rtl-text@0.2.3/mapbox-gl-rtl-text.min.js'); map.on('load', function() { document .getElementById('languages') .addEventListener('change', function(event) { var language = event.target.value; map.setStyle(`https://api.jawg.io/styles/jawg-dark.json?lang=${language}&access-token=${accessToken}`); }); }); </script> </body> </html>","title":"Change the language of your map"},{"location":"MapLibreJs/Change-style/","text":"Change the style of your map Estimated reading time : 1 minutes Switch between the default MapSaudi styles for your map using this code sample that uses the MapLibre GL JS library. <!DOCTYPE html> <html> <head> <meta charset=UTF-8> <link href=\"https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.css\" rel=\"stylesheet\" /> <script src=\"https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.js\"></script> <style> body { margin: 0; padding: 0; } #map { min-height: 500px; height: 100%; width: 100%; } select { z-index: 1; position: absolute; top: 5px; left: 5px; padding: 5px; background: white; } </style> </head> <body> <div id=\"map\"> <select id=\"styles\" class=\"dropdownSelect\"> <option value=\"jawg-streets\">jawg-streets</option> <option value=\"jawg-sunny\">jawg-sunny</option> <option value=\"jawg-terrain\">jawg-terrain</option> <option value=\"jawg-dark\">jawg-dark</option> <option value=\"jawg-light\">jawg-light</option> </select> </div> <script> // Don't forget to replace <YOUR_ACCESS_TOKEN> by your real access token! const accessToken = '<YOUR_ACCESS_TOKEN>'; const layerList = document.getElementById('styles'); const options = layerList.getElementsByTagName('option'); const map = new maplibregl.Map({ container: 'map', style: `https://api.jawg.io/styles/${options[0].value}.json?access-token=${accessToken}`, zoom: 12, center: [35.51, 33.88] }).addControl(new maplibregl.NavigationControl(), 'top-right'); // This plugin is used for right to left languages maplibregl.setRTLTextPlugin('https://unpkg.com/@mapbox/mapbox-gl-rtl-text@0.2.3/mapbox-gl-rtl-text.min.js'); map.on('load', function() { document .getElementById('styles') .addEventListener('change', function(event) { const style = event.target.value; map.setStyle(`https://api.jawg.io/styles/${style}.json?access-token=${accessToken}`); }); }); </script> </body> </html>","title":"Change style"},{"location":"MapLibreJs/Change-style/#change-the-style-of-your-map","text":"Estimated reading time : 1 minutes Switch between the default MapSaudi styles for your map using this code sample that uses the MapLibre GL JS library. <!DOCTYPE html> <html> <head> <meta charset=UTF-8> <link href=\"https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.css\" rel=\"stylesheet\" /> <script src=\"https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.js\"></script> <style> body { margin: 0; padding: 0; } #map { min-height: 500px; height: 100%; width: 100%; } select { z-index: 1; position: absolute; top: 5px; left: 5px; padding: 5px; background: white; } </style> </head> <body> <div id=\"map\"> <select id=\"styles\" class=\"dropdownSelect\"> <option value=\"jawg-streets\">jawg-streets</option> <option value=\"jawg-sunny\">jawg-sunny</option> <option value=\"jawg-terrain\">jawg-terrain</option> <option value=\"jawg-dark\">jawg-dark</option> <option value=\"jawg-light\">jawg-light</option> </select> </div> <script> // Don't forget to replace <YOUR_ACCESS_TOKEN> by your real access token! const accessToken = '<YOUR_ACCESS_TOKEN>'; const layerList = document.getElementById('styles'); const options = layerList.getElementsByTagName('option'); const map = new maplibregl.Map({ container: 'map', style: `https://api.jawg.io/styles/${options[0].value}.json?access-token=${accessToken}`, zoom: 12, center: [35.51, 33.88] }).addControl(new maplibregl.NavigationControl(), 'top-right'); // This plugin is used for right to left languages maplibregl.setRTLTextPlugin('https://unpkg.com/@mapbox/mapbox-gl-rtl-text@0.2.3/mapbox-gl-rtl-text.min.js'); map.on('load', function() { document .getElementById('styles') .addEventListener('change', function(event) { const style = event.target.value; map.setStyle(`https://api.jawg.io/styles/${style}.json?access-token=${accessToken}`); }); }); </script> </body> </html>","title":"Change the style of your map"},{"location":"MapLibreJs/Display-a-popup/","text":"Display a popup Estimated reading time : 1 minutes Check out this code sample that uses the MapLibre GL JS library to add a popup over your map data points. <!DOCTYPE html> <html> <head> <meta charset=UTF-8> <link href=\"https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.css\" rel=\"stylesheet\" /> <script src=\"https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.js\"></script> <style> body { margin: 0; padding: 0; } #map { min-height: 500px; height: 100%; width: 100%; } </style> </head> <body> <div id=\"map\"></div> <script> // Don't forget to replace <YOUR_ACCESS_TOKEN> by your real access token! const accessToken = '<YOUR_ACCESS_TOKEN>'; const map = new maplibregl.Map({ container: 'map', style: `https://api.jawg.io/styles/jawg-sunny.json?access-token=${accessToken}`, center: [-61.572646, 16.233131], zoom: 9, }).addControl(new maplibregl.NavigationControl(), 'top-right'); // This plugin is used for right to left languages maplibregl.setRTLTextPlugin('https://unpkg.com/@mapbox/mapbox-gl-rtl-text@0.2.3/mapbox-gl-rtl-text.min.js'); // Basic popup definition new maplibregl.Popup({ closeOnClick: false }) .setLngLat([-61.572646, 16.273131]) .setHTML('<b>Hello world!</b><br/> I am a popup.') .addTo(map); // Popup definition before binding it to a marker const markerPopup = new maplibregl.Popup({ closeOnClick: true }) .setHTML('<b> A popup that is shown when you click on a marker</b>'); // Connect the popup to a new marker new maplibregl.Marker() .setLngLat([-61.653889, 15.966636]) .setPopup(markerPopup) .addTo(map); </script> </body> </html>","title":"Display a popup"},{"location":"MapLibreJs/Display-a-popup/#display-a-popup","text":"Estimated reading time : 1 minutes Check out this code sample that uses the MapLibre GL JS library to add a popup over your map data points. <!DOCTYPE html> <html> <head> <meta charset=UTF-8> <link href=\"https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.css\" rel=\"stylesheet\" /> <script src=\"https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.js\"></script> <style> body { margin: 0; padding: 0; } #map { min-height: 500px; height: 100%; width: 100%; } </style> </head> <body> <div id=\"map\"></div> <script> // Don't forget to replace <YOUR_ACCESS_TOKEN> by your real access token! const accessToken = '<YOUR_ACCESS_TOKEN>'; const map = new maplibregl.Map({ container: 'map', style: `https://api.jawg.io/styles/jawg-sunny.json?access-token=${accessToken}`, center: [-61.572646, 16.233131], zoom: 9, }).addControl(new maplibregl.NavigationControl(), 'top-right'); // This plugin is used for right to left languages maplibregl.setRTLTextPlugin('https://unpkg.com/@mapbox/mapbox-gl-rtl-text@0.2.3/mapbox-gl-rtl-text.min.js'); // Basic popup definition new maplibregl.Popup({ closeOnClick: false }) .setLngLat([-61.572646, 16.273131]) .setHTML('<b>Hello world!</b><br/> I am a popup.') .addTo(map); // Popup definition before binding it to a marker const markerPopup = new maplibregl.Popup({ closeOnClick: true }) .setHTML('<b> A popup that is shown when you click on a marker</b>'); // Connect the popup to a new marker new maplibregl.Marker() .setLngLat([-61.653889, 15.966636]) .setPopup(markerPopup) .addTo(map); </script> </body> </html>","title":"Display a popup"},{"location":"MapLibreJs/Display-a-radius/","text":"Draw a radius Estimated reading time : 1 minutes Use the code sample below to draw a location radius using a polygon. This example uses the Turf.js library to generate a circle as a polygon <!DOCTYPE html> <html> <head> <meta charset=UTF-8> <link href=\"https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.css\" rel=\"stylesheet\" /> <script src=\"https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.js\"></script> <script src='https://unpkg.com/@turf/turf@6/turf.min.js'></script> <style> html, body { margin: 0; padding: 0; height: 100%; } #map { min-height: 500px; height: 100%; width: 100%; } </style> </head> <body> <div id=\"map\"></div> <script> // Don't forget to replace <YOUR_ACCESS_TOKEN> by your real access token! const accessToken = \"<YOUR_ACCESS_TOKEN>\"; const center = [6.2361704, 43.1362582]; const map = new maplibregl.Map({ container: \"map\", style: `https://api.jawg.io/styles/jawg-sunny.json?access-token=${accessToken}`, zoom: 13, center: center, hash: true }).addControl(new maplibregl.NavigationControl(), \"top-right\") .addControl(new maplibregl.ScaleControl()); // This plugin is used for right to left languages maplibregl.setRTLTextPlugin( \"https://unpkg.com/@mapbox/mapbox-gl-rtl-text@0.2.3/mapbox-gl-rtl-text.min.js\" ); map.on(\"load\", function() { // Generate a polygon using turf.circle. // See https://turfjs.org/docs/#circle const radius = 1; // kilometer var options = { steps: 64, units: 'kilometers' }; var circle = turf.circle(center, radius, options); // Add a fill layer with some transparency. map.addLayer({ id: \"location-radius\", type: \"fill\", source: { type: \"geojson\", data: circle }, paint: { \"fill-color\": \"#8CCFFF\", \"fill-opacity\": 0.5, } }); // Add a line layer to draw the circle outline map.addLayer({ id: \"location-radius-outline\", type: \"line\", source: { type: \"geojson\", data: circle }, paint: { \"line-color\": \"#0094ff\", \"line-width\": 3 } }); }); </script> </body> </html>","title":"Draw a radius"},{"location":"MapLibreJs/Display-a-radius/#draw-a-radius","text":"Estimated reading time : 1 minutes Use the code sample below to draw a location radius using a polygon. This example uses the Turf.js library to generate a circle as a polygon <!DOCTYPE html> <html> <head> <meta charset=UTF-8> <link href=\"https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.css\" rel=\"stylesheet\" /> <script src=\"https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.js\"></script> <script src='https://unpkg.com/@turf/turf@6/turf.min.js'></script> <style> html, body { margin: 0; padding: 0; height: 100%; } #map { min-height: 500px; height: 100%; width: 100%; } </style> </head> <body> <div id=\"map\"></div> <script> // Don't forget to replace <YOUR_ACCESS_TOKEN> by your real access token! const accessToken = \"<YOUR_ACCESS_TOKEN>\"; const center = [6.2361704, 43.1362582]; const map = new maplibregl.Map({ container: \"map\", style: `https://api.jawg.io/styles/jawg-sunny.json?access-token=${accessToken}`, zoom: 13, center: center, hash: true }).addControl(new maplibregl.NavigationControl(), \"top-right\") .addControl(new maplibregl.ScaleControl()); // This plugin is used for right to left languages maplibregl.setRTLTextPlugin( \"https://unpkg.com/@mapbox/mapbox-gl-rtl-text@0.2.3/mapbox-gl-rtl-text.min.js\" ); map.on(\"load\", function() { // Generate a polygon using turf.circle. // See https://turfjs.org/docs/#circle const radius = 1; // kilometer var options = { steps: 64, units: 'kilometers' }; var circle = turf.circle(center, radius, options); // Add a fill layer with some transparency. map.addLayer({ id: \"location-radius\", type: \"fill\", source: { type: \"geojson\", data: circle }, paint: { \"fill-color\": \"#8CCFFF\", \"fill-opacity\": 0.5, } }); // Add a line layer to draw the circle outline map.addLayer({ id: \"location-radius-outline\", type: \"line\", source: { type: \"geojson\", data: circle }, paint: { \"line-color\": \"#0094ff\", \"line-width\": 3 } }); }); </script> </body> </html>","title":"Draw a radius"},{"location":"MapLibreJs/Display-a-route/","text":"Display a route on your map Estimated reading time : 1 minutes Use the code sample below to display a route on your map with the MapLibre GL JS library using the MapSaudi Routing API . <!DOCTYPE html> <html> <head> <meta charset=UTF-8> <link href=\"https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.css\" rel=\"stylesheet\" /> <script src=\"https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.js\"></script> <style> body { margin: 0; padding: 0; } #map { min-height: 500px; height: 100%; width: 100%; } </style> </head> <body> <div id=\"map\"></div> <script> // Don't forget to replace <YOUR_ACCESS_TOKEN> by your real access token! const accessToken = \"<YOUR_ACCESS_TOKEN>\"; const map = new maplibregl.Map({ container: \"map\", style: `https://api.jawg.io/styles/jawg-streets.json?access-token=${accessToken}`, zoom: 5, center: [3.47, 46.0], hash: true }).addControl(new maplibregl.NavigationControl(), \"top-right\"); // This plugin is used for right to left languages maplibregl.setRTLTextPlugin( \"https://unpkg.com/@mapbox/mapbox-gl-rtl-text@0.2.3/mapbox-gl-rtl-text.min.js\" ); map.on(\"load\", function() { // Paris [lng, lat] const start = [2.3522, 48.8566] // Marseille [lng, lat] const end = [5.3698, 43.2965] // Format the coordinates for OSRM const coordinates = `${start.join()};${end.join()}` // '2.3522,48.8566;5.3698,43.2965' // Get the fastest route. // See https://www.jawg.io/docs/apidocs/routing/osrm for more information about the request parameters and response format. fetch(`https://api.jawg.io/routing/route/v1/car/${coordinates}?alternatives=false&geometries=geojson&overview=full&access-token=${accessToken}`) .then(response => response.json()) .then(response => { const route = response.routes[0]; // Add the route geometry to the map map.addSource(\"route\", { type: \"geojson\", data: route.geometry }); // Set the first label layer name as we want to insert our layers just before the labels. // This is style specific, here we use jawg-streets which has a \"road-shield\" layer. // For other styles this is \"housenum-label\". // If you are using a custom style you can check the layer name in the style JSON: https://api.jawg.io/styles/{styleId}.json?access-token=${accessToken} const firstLabelLayerId = \"road-shield\"; map.addLayer({ id: \"route-line\", type: \"line\", source: \"route\", layout: { \"line-cap\": \"round\", \"line-join\": \"round\" }, paint: { \"line-color\": \"#13BBFA\", \"line-width\": [ \"interpolate\", [\"exponential\", 1.5], [\"zoom\"], 5, 3, 18, 8 ] } // Add the layer before the first label layer e.g. \"road-shield\" }, firstLabelLayerId); // (optional) Add an outline to the route for better rendering map.addLayer({ id: \"route-case\", type: \"line\", source: \"route\", layout: { \"line-cap\": \"round\", \"line-join\": \"round\" }, paint: { \"line-width\": [ \"interpolate\", [\"exponential\", 1.5], [\"zoom\"], 5, 2, 18, 3 ], \"line-color\": \"#4D93E3\", \"line-gap-width\": [ \"interpolate\", [\"exponential\", 1.5], [\"zoom\"], 5, 3, 18, 8 ] } // Add the layer before the first label layer e.g. \"road-shield\" }, firstLabelLayerId); // Show the starting and the ending points as circles map.addLayer({ id: \"route-start\", type: \"circle\", source: { type: \"geojson\", data: { type: \"MultiPoint\", coordinates: [ route.geometry.coordinates[0], route.geometry.coordinates[route.geometry.coordinates.length - 1], ] } }, paint: { \"circle-radius\": [ \"interpolate\", [\"exponential\", 1.5], [\"zoom\"], 5, 6, 18, 15 ], \"circle-color\": \"#13BBFA\", \"circle-stroke-width\": 3, \"circle-stroke-color\": \"#4D93E3\" } // Add the layer before the first label layer e.g. \"road-shield\" }, firstLabelLayerId); }); }); </script> </body> </html>","title":"Display a route on your map"},{"location":"MapLibreJs/Display-a-route/#display-a-route-on-your-map","text":"Estimated reading time : 1 minutes Use the code sample below to display a route on your map with the MapLibre GL JS library using the MapSaudi Routing API . <!DOCTYPE html> <html> <head> <meta charset=UTF-8> <link href=\"https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.css\" rel=\"stylesheet\" /> <script src=\"https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.js\"></script> <style> body { margin: 0; padding: 0; } #map { min-height: 500px; height: 100%; width: 100%; } </style> </head> <body> <div id=\"map\"></div> <script> // Don't forget to replace <YOUR_ACCESS_TOKEN> by your real access token! const accessToken = \"<YOUR_ACCESS_TOKEN>\"; const map = new maplibregl.Map({ container: \"map\", style: `https://api.jawg.io/styles/jawg-streets.json?access-token=${accessToken}`, zoom: 5, center: [3.47, 46.0], hash: true }).addControl(new maplibregl.NavigationControl(), \"top-right\"); // This plugin is used for right to left languages maplibregl.setRTLTextPlugin( \"https://unpkg.com/@mapbox/mapbox-gl-rtl-text@0.2.3/mapbox-gl-rtl-text.min.js\" ); map.on(\"load\", function() { // Paris [lng, lat] const start = [2.3522, 48.8566] // Marseille [lng, lat] const end = [5.3698, 43.2965] // Format the coordinates for OSRM const coordinates = `${start.join()};${end.join()}` // '2.3522,48.8566;5.3698,43.2965' // Get the fastest route. // See https://www.jawg.io/docs/apidocs/routing/osrm for more information about the request parameters and response format. fetch(`https://api.jawg.io/routing/route/v1/car/${coordinates}?alternatives=false&geometries=geojson&overview=full&access-token=${accessToken}`) .then(response => response.json()) .then(response => { const route = response.routes[0]; // Add the route geometry to the map map.addSource(\"route\", { type: \"geojson\", data: route.geometry }); // Set the first label layer name as we want to insert our layers just before the labels. // This is style specific, here we use jawg-streets which has a \"road-shield\" layer. // For other styles this is \"housenum-label\". // If you are using a custom style you can check the layer name in the style JSON: https://api.jawg.io/styles/{styleId}.json?access-token=${accessToken} const firstLabelLayerId = \"road-shield\"; map.addLayer({ id: \"route-line\", type: \"line\", source: \"route\", layout: { \"line-cap\": \"round\", \"line-join\": \"round\" }, paint: { \"line-color\": \"#13BBFA\", \"line-width\": [ \"interpolate\", [\"exponential\", 1.5], [\"zoom\"], 5, 3, 18, 8 ] } // Add the layer before the first label layer e.g. \"road-shield\" }, firstLabelLayerId); // (optional) Add an outline to the route for better rendering map.addLayer({ id: \"route-case\", type: \"line\", source: \"route\", layout: { \"line-cap\": \"round\", \"line-join\": \"round\" }, paint: { \"line-width\": [ \"interpolate\", [\"exponential\", 1.5], [\"zoom\"], 5, 2, 18, 3 ], \"line-color\": \"#4D93E3\", \"line-gap-width\": [ \"interpolate\", [\"exponential\", 1.5], [\"zoom\"], 5, 3, 18, 8 ] } // Add the layer before the first label layer e.g. \"road-shield\" }, firstLabelLayerId); // Show the starting and the ending points as circles map.addLayer({ id: \"route-start\", type: \"circle\", source: { type: \"geojson\", data: { type: \"MultiPoint\", coordinates: [ route.geometry.coordinates[0], route.geometry.coordinates[route.geometry.coordinates.length - 1], ] } }, paint: { \"circle-radius\": [ \"interpolate\", [\"exponential\", 1.5], [\"zoom\"], 5, 6, 18, 15 ], \"circle-color\": \"#13BBFA\", \"circle-stroke-width\": 3, \"circle-stroke-color\": \"#4D93E3\" } // Add the layer before the first label layer e.g. \"road-shield\" }, firstLabelLayerId); }); }); </script> </body> </html>","title":"Display a route on your map"},{"location":"MapLibreJs/Quickstart/","text":"MapLibre GL JS (vector map) Estimated reading time : 2 minutes Prerequisite For all of our examples, you will need: An API key and MapSaudi account ( from the platform ), Basic knowledge in JavaScript and HTML, One style (default or custom style) Get the library There are several ways to get this library: from the github repository ( github.com/Leaflet/Leaflet ) from npmjs.com (package name: leaflet ) from a CDN (e.g unpkg.com) <link rel=\"stylesheet\" href=\"https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.css\" /> <script src=\"https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.js\"></script> Attribution Your map must display the following links: MapSaudi and \u00a9 OpenStreetMap . This is our attribution template: <a href=\"https://basemaps.mapsaudi.com/\" title=\"Tiles Courtesy of MapSaudi Maps\" target=\"_blank\" class=\"jawg-attrib\" >&copy; <b>MapSaudi</b>Maps</a> | <a href=\"https://www.openstreetmap.org/copyright\" title=\"OpenStreetMap is open data licensed under ODbL\" target=\"_blank\" class=\"osm-attrib\" >&copy; OSM contributors</a> Our examples simple-map : Simple map integration add-marker : Add a marker on your map add-geometry : Add a geometry from GeoJSON on your map add-your-data : Add a GeoJSON to your map add-popup : Add a popup on your map change-language : Change your map's language change-style : Change your map style (with our default styles) custom-style : Use a custom style from MapSaudi Lab display-route : Display a route on your map draw-radius : Draw a location radius","title":"Quickstart"},{"location":"MapLibreJs/Quickstart/#maplibre-gl-js-vector-map","text":"Estimated reading time : 2 minutes","title":"MapLibre GL JS (vector map)"},{"location":"MapLibreJs/Quickstart/#prerequisite","text":"For all of our examples, you will need: An API key and MapSaudi account ( from the platform ), Basic knowledge in JavaScript and HTML, One style (default or custom style)","title":"Prerequisite"},{"location":"MapLibreJs/Quickstart/#get-the-library","text":"There are several ways to get this library: from the github repository ( github.com/Leaflet/Leaflet ) from npmjs.com (package name: leaflet ) from a CDN (e.g unpkg.com) <link rel=\"stylesheet\" href=\"https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.css\" /> <script src=\"https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.js\"></script>","title":"Get the library"},{"location":"MapLibreJs/Quickstart/#attribution","text":"Your map must display the following links: MapSaudi and \u00a9 OpenStreetMap . This is our attribution template: <a href=\"https://basemaps.mapsaudi.com/\" title=\"Tiles Courtesy of MapSaudi Maps\" target=\"_blank\" class=\"jawg-attrib\" >&copy; <b>MapSaudi</b>Maps</a> | <a href=\"https://www.openstreetmap.org/copyright\" title=\"OpenStreetMap is open data licensed under ODbL\" target=\"_blank\" class=\"osm-attrib\" >&copy; OSM contributors</a>","title":"Attribution"},{"location":"MapLibreJs/Quickstart/#our-examples","text":"simple-map : Simple map integration add-marker : Add a marker on your map add-geometry : Add a geometry from GeoJSON on your map add-your-data : Add a GeoJSON to your map add-popup : Add a popup on your map change-language : Change your map's language change-style : Change your map style (with our default styles) custom-style : Use a custom style from MapSaudi Lab display-route : Display a route on your map draw-radius : Draw a location radius","title":"Our examples"},{"location":"MapLibreJs/Simple-map/","text":"Simple map integration Estimated reading time : 1 minutes Check out this code sample that uses the MapLibre GL JS library to integrate a simple map onto your site. <!DOCTYPE html> <html> <head> <meta charset=UTF-8> <link href='https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.css' rel='stylesheet' /> <script src='https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.js'></script> <style> body { margin: 0; padding: 0; } #map { min-height: 500px; height: 100%; width: 100%; } </style> </head> <body> <div id=\"map\"></div> <script> // Don't forget to replace <YOUR_ACCESS_TOKEN> by your real access token! const accessToken = '<YOUR_ACCESS_TOKEN>'; const map = new maplibregl.Map({ container: 'map', style: `https://api.jawg.io/styles/jawg-sunny.json?access-token=${accessToken}`, zoom: 2, center: [2.3210938, 48.7965913] }).addControl(new maplibregl.NavigationControl(), 'top-right'); // This plugin is used for right to left languages maplibregl.setRTLTextPlugin('https://unpkg.com/@mapbox/mapbox-gl-rtl-text@0.2.3/mapbox-gl-rtl-text.min.js'); </script> </body> </html>","title":"Simple map"},{"location":"MapLibreJs/Simple-map/#simple-map-integration","text":"Estimated reading time : 1 minutes Check out this code sample that uses the MapLibre GL JS library to integrate a simple map onto your site. <!DOCTYPE html> <html> <head> <meta charset=UTF-8> <link href='https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.css' rel='stylesheet' /> <script src='https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.js'></script> <style> body { margin: 0; padding: 0; } #map { min-height: 500px; height: 100%; width: 100%; } </style> </head> <body> <div id=\"map\"></div> <script> // Don't forget to replace <YOUR_ACCESS_TOKEN> by your real access token! const accessToken = '<YOUR_ACCESS_TOKEN>'; const map = new maplibregl.Map({ container: 'map', style: `https://api.jawg.io/styles/jawg-sunny.json?access-token=${accessToken}`, zoom: 2, center: [2.3210938, 48.7965913] }).addControl(new maplibregl.NavigationControl(), 'top-right'); // This plugin is used for right to left languages maplibregl.setRTLTextPlugin('https://unpkg.com/@mapbox/mapbox-gl-rtl-text@0.2.3/mapbox-gl-rtl-text.min.js'); </script> </body> </html>","title":"Simple map integration"},{"location":"MapLibreJs/Use-a-custom-style/","text":"Use a custom style from MapSaudi Lab Estimated reading time : 1 minutes Check out this code sample that allows you to add a custom style to your map, using the MapLibre GL JS library. <!DOCTYPE html> <html> <head> <meta charset=UTF-8> <link href=\"https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.css\" rel=\"stylesheet\" /> <script src=\"https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.js\"></script> <style> body { margin: 0; padding: 0; } #map { min-height: 500px; height: 100%; width: 100%; } </style> </head> <body> <div id=\"map\"></div> <script> // Don't forget to replace <YOUR_ACCESS_TOKEN> by your real access token! const accessToken = '<YOUR_ACCESS_TOKEN>'; // Set your custom style ID. To get your custom style ID see https://www.jawg.io/docs/maps#get-custom-style-id const styleId = '<YOUR_CUSTOM_STYLE_ID>'; var map = new maplibregl.Map({ container: 'map', style: `https://api.jawg.io/styles/${styleId}.json?access-token=${accessToken}`, zoom: 13, center: [-91.18764, 30.44581], }).addControl(new maplibregl.NavigationControl(), 'top-right'); // This plugin is used for right to left languages maplibregl.setRTLTextPlugin('https://unpkg.com/@mapbox/mapbox-gl-rtl-text@0.2.3/mapbox-gl-rtl-text.min.js'); </script> </body> </html>","title":"Draw a radius"},{"location":"MapLibreJs/Use-a-custom-style/#use-a-custom-style-from-mapsaudi-lab","text":"Estimated reading time : 1 minutes Check out this code sample that allows you to add a custom style to your map, using the MapLibre GL JS library. <!DOCTYPE html> <html> <head> <meta charset=UTF-8> <link href=\"https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.css\" rel=\"stylesheet\" /> <script src=\"https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.js\"></script> <style> body { margin: 0; padding: 0; } #map { min-height: 500px; height: 100%; width: 100%; } </style> </head> <body> <div id=\"map\"></div> <script> // Don't forget to replace <YOUR_ACCESS_TOKEN> by your real access token! const accessToken = '<YOUR_ACCESS_TOKEN>'; // Set your custom style ID. To get your custom style ID see https://www.jawg.io/docs/maps#get-custom-style-id const styleId = '<YOUR_CUSTOM_STYLE_ID>'; var map = new maplibregl.Map({ container: 'map', style: `https://api.jawg.io/styles/${styleId}.json?access-token=${accessToken}`, zoom: 13, center: [-91.18764, 30.44581], }).addControl(new maplibregl.NavigationControl(), 'top-right'); // This plugin is used for right to left languages maplibregl.setRTLTextPlugin('https://unpkg.com/@mapbox/mapbox-gl-rtl-text@0.2.3/mapbox-gl-rtl-text.min.js'); </script> </body> </html>","title":"Use a custom style from MapSaudi Lab"},{"location":"MapLibreJs/add-your-date/","text":"Add your data Estimated reading time : 1 minutes Use the code sample below to add your data over your Jawg map. This example is perfect to build a simple store locator! <!DOCTYPE html> <html> <head> <meta charset=UTF-8> <link href=\"https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.css\" rel=\"stylesheet\" /> <script src=\"https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.js\"></script> <style> body { margin: 0; padding: 0; } #map { min-height: 500px; height: 100%; width: 100%; } </style> </head> <body> <div id=\"map\"></div> <script> // Don't forget to replace <YOUR_ACCESS_TOKEN> by your real access token! const accessToken = \"<YOUR_ACCESS_TOKEN>\"; const map = new maplibregl.Map({ container: \"map\", style: `https://api.jawg.io/styles/jawg-sunny.json?access-token=${accessToken}`, zoom: 10, center: [2.3488, 48.8534], hash: true }).addControl(new maplibregl.NavigationControl(), \"top-right\"); // This plugin is used for right to left languages maplibregl.setRTLTextPlugin( \"https://unpkg.com/@mapbox/mapbox-gl-rtl-text@0.2.3/mapbox-gl-rtl-text.min.js\" ); map.on(\"load\", function() { // Add an image to use as a custom marker map.loadImage( \"https://media.jawg.io/add-your-data/shop.png\", function(error, image) { if (error) throw error; // Add image to map map.addImage(\"custom-marker\", image); // Add layer to map, using your geojson as source map.addLayer({ id: \"shops\", type: \"symbol\", source: { type: \"geojson\", data: \"https://media.jawg.io/add-your-data/marketplaces.geojson\" }, layout: { \"icon-image\": \"custom-marker\", \"icon-anchor\": \"bottom\" } }); } ); }); </script> </body> </html>","title":"Add your data"},{"location":"MapLibreJs/add-your-date/#add-your-data","text":"Estimated reading time : 1 minutes Use the code sample below to add your data over your Jawg map. This example is perfect to build a simple store locator! <!DOCTYPE html> <html> <head> <meta charset=UTF-8> <link href=\"https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.css\" rel=\"stylesheet\" /> <script src=\"https://unpkg.com/maplibre-gl@2.1.9/dist/maplibre-gl.js\"></script> <style> body { margin: 0; padding: 0; } #map { min-height: 500px; height: 100%; width: 100%; } </style> </head> <body> <div id=\"map\"></div> <script> // Don't forget to replace <YOUR_ACCESS_TOKEN> by your real access token! const accessToken = \"<YOUR_ACCESS_TOKEN>\"; const map = new maplibregl.Map({ container: \"map\", style: `https://api.jawg.io/styles/jawg-sunny.json?access-token=${accessToken}`, zoom: 10, center: [2.3488, 48.8534], hash: true }).addControl(new maplibregl.NavigationControl(), \"top-right\"); // This plugin is used for right to left languages maplibregl.setRTLTextPlugin( \"https://unpkg.com/@mapbox/mapbox-gl-rtl-text@0.2.3/mapbox-gl-rtl-text.min.js\" ); map.on(\"load\", function() { // Add an image to use as a custom marker map.loadImage( \"https://media.jawg.io/add-your-data/shop.png\", function(error, image) { if (error) throw error; // Add image to map map.addImage(\"custom-marker\", image); // Add layer to map, using your geojson as source map.addLayer({ id: \"shops\", type: \"symbol\", source: { type: \"geojson\", data: \"https://media.jawg.io/add-your-data/marketplaces.geojson\" }, layout: { \"icon-image\": \"custom-marker\", \"icon-anchor\": \"bottom\" } }); } ); }); </script> </body> </html>","title":"Add your data"},{"location":"Mapbox-ios/Add-Geometry/","text":"Add geometry Estimated reading time : 1 minutes Check out this code sample that uses the Mapbox GL iOS library to add a geometry from GeoJSON onto your map. import UIKit import Mapbox class AddGeometryViewController: UIViewController, MGLMapViewDelegate { // Update the token here if you want to customize the token for this controller in your own project. // Otherwise update the value at the top of the main controller: ViewController.swift. // let accessToken = \"YOUR_ACCESS_TOKEN\" var mapView = MGLMapView() var timer: Timer? var polylineSource: MGLShapeSource? var currentIndex = 1 var allCoordinates: [CLLocationCoordinate2D]! override func viewDidLoad() { super.viewDidLoad() // Initialize title title = \"Simple geometry\" let url = URL(string: \"https://api.jawg.io/styles/jawg-dark.json?access-token=\"+accessToken) mapView = MGLMapView(frame: view.bounds, styleURL: url) mapView.autoresizingMask = [.flexibleWidth, .flexibleHeight] mapView.delegate = self mapView.logoView.isHidden = true // Set the map\u2019s center coordinate and zoom level. mapView.setCenter( CLLocationCoordinate2D(latitude: 48.8534, longitude: 2.3488), zoomLevel: 10, animated: false) view.addSubview(mapView) allCoordinates = coordinates } // Paris boundaries let coordinates = [(2.319887,48.90046),(2.329981,48.901163),(2.38515,48.902008),(2.394906,48.898444),(2.397627,48.894578),(2.398846,48.887109),(2.408308,48.880409),(2.41327,48.872892),(2.413838,48.864376),(2.416341,48.849234),(2.412246,48.834539),(2.422139,48.835798),(2.41939,48.842577),(2.42813,48.841528),(2.447699,48.844818),(2.463438,48.842089),(2.467426,48.838891),(2.467582,48.833133),(2.462696,48.81906),(2.458705,48.81714),(2.438448,48.818232),(2.421462,48.824054),(2.406032,48.827615),(2.390939,48.826079),(2.379296,48.821214),(2.363947,48.816314),(2.345958,48.816036),(2.331898,48.817011),(2.332461,48.818247),(2.292196,48.827142),(2.279052,48.83249),(2.272793,48.82792),(2.263174,48.83398),(2.255144,48.83481),(2.251709,48.838822),(2.250612,48.845555),(2.239978,48.849702),(2.224219,48.853517),(2.228225,48.865183),(2.231736,48.869069),(2.245678,48.876435),(2.25541,48.874264),(2.258467,48.880387),(2.277487,48.877968),(2.282327,48.883923),(2.291507,48.889472),(2.319887,48.90046)].map({CLLocationCoordinate2D(latitude: $0.1, longitude: $0.0)}) func mapViewDidFinishLoadingMap(_ mapView: MGLMapView) { addPolyline(to: mapView.style!) // To get an animation, uncomment this line and remove the code at the end of addPolyline() //animatePolyline() } func addPolyline(to style: MGLStyle) { // Add an empty MGLShapeSource, we\u2019ll keep a reference to this and add points to this later. let source = MGLShapeSource(identifier: \"polyline\", shape: nil, options: nil) style.addSource(source) polylineSource = source // Add a layer to style our polyline. let layer = MGLLineStyleLayer(identifier: \"polyline\", source: source) layer.lineJoin = NSExpression(forConstantValue: \"round\") layer.lineCap = NSExpression(forConstantValue: \"round\") layer.lineColor = NSExpression(forConstantValue: UIColor.systemBlue) // The line width should gradually increase based on the zoom level. layer.lineWidth = NSExpression(format: \"mgl_interpolate:withCurveType:parameters:stops:($zoomLevel, 'linear', nil, %@)\",[14: 5, 18: 20]) style.addLayer(layer) // Update polyline - remove if an animated polyline is desired let polyline = MGLPolylineFeature(coordinates: allCoordinates, count: UInt(allCoordinates.count)) polylineSource?.shape = polyline } func animatePolyline() { currentIndex = 1 // Start a timer that will simulate adding points to our polyline. This could also represent coordinates being added to our polyline from another source, such as a CLLocationManagerDelegate. timer = Timer.scheduledTimer(timeInterval: 0.05, target: self, selector: #selector(tick), userInfo: nil, repeats: true) } @objc func tick() { if currentIndex > allCoordinates.count { timer?.invalidate() timer = nil return } // Create a subarray of locations up to the current index. let coordinates = Array(allCoordinates[0..<currentIndex]) // Update our MGLShapeSource with the current locations. updatePolylineWithCoordinates(coordinates: coordinates) currentIndex += 1 } func updatePolylineWithCoordinates(coordinates: [CLLocationCoordinate2D]) { var mutableCoordinates = coordinates let polyline = MGLPolylineFeature(coordinates: &mutableCoordinates, count: UInt(mutableCoordinates.count)) // Updating the MGLShapeSource\u2019s shape will have the map redraw our polyline with the current coordinates. polylineSource?.shape = polyline } }","title":"Add geometry"},{"location":"Mapbox-ios/Add-Geometry/#add-geometry","text":"Estimated reading time : 1 minutes Check out this code sample that uses the Mapbox GL iOS library to add a geometry from GeoJSON onto your map. import UIKit import Mapbox class AddGeometryViewController: UIViewController, MGLMapViewDelegate { // Update the token here if you want to customize the token for this controller in your own project. // Otherwise update the value at the top of the main controller: ViewController.swift. // let accessToken = \"YOUR_ACCESS_TOKEN\" var mapView = MGLMapView() var timer: Timer? var polylineSource: MGLShapeSource? var currentIndex = 1 var allCoordinates: [CLLocationCoordinate2D]! override func viewDidLoad() { super.viewDidLoad() // Initialize title title = \"Simple geometry\" let url = URL(string: \"https://api.jawg.io/styles/jawg-dark.json?access-token=\"+accessToken) mapView = MGLMapView(frame: view.bounds, styleURL: url) mapView.autoresizingMask = [.flexibleWidth, .flexibleHeight] mapView.delegate = self mapView.logoView.isHidden = true // Set the map\u2019s center coordinate and zoom level. mapView.setCenter( CLLocationCoordinate2D(latitude: 48.8534, longitude: 2.3488), zoomLevel: 10, animated: false) view.addSubview(mapView) allCoordinates = coordinates } // Paris boundaries let coordinates = [(2.319887,48.90046),(2.329981,48.901163),(2.38515,48.902008),(2.394906,48.898444),(2.397627,48.894578),(2.398846,48.887109),(2.408308,48.880409),(2.41327,48.872892),(2.413838,48.864376),(2.416341,48.849234),(2.412246,48.834539),(2.422139,48.835798),(2.41939,48.842577),(2.42813,48.841528),(2.447699,48.844818),(2.463438,48.842089),(2.467426,48.838891),(2.467582,48.833133),(2.462696,48.81906),(2.458705,48.81714),(2.438448,48.818232),(2.421462,48.824054),(2.406032,48.827615),(2.390939,48.826079),(2.379296,48.821214),(2.363947,48.816314),(2.345958,48.816036),(2.331898,48.817011),(2.332461,48.818247),(2.292196,48.827142),(2.279052,48.83249),(2.272793,48.82792),(2.263174,48.83398),(2.255144,48.83481),(2.251709,48.838822),(2.250612,48.845555),(2.239978,48.849702),(2.224219,48.853517),(2.228225,48.865183),(2.231736,48.869069),(2.245678,48.876435),(2.25541,48.874264),(2.258467,48.880387),(2.277487,48.877968),(2.282327,48.883923),(2.291507,48.889472),(2.319887,48.90046)].map({CLLocationCoordinate2D(latitude: $0.1, longitude: $0.0)}) func mapViewDidFinishLoadingMap(_ mapView: MGLMapView) { addPolyline(to: mapView.style!) // To get an animation, uncomment this line and remove the code at the end of addPolyline() //animatePolyline() } func addPolyline(to style: MGLStyle) { // Add an empty MGLShapeSource, we\u2019ll keep a reference to this and add points to this later. let source = MGLShapeSource(identifier: \"polyline\", shape: nil, options: nil) style.addSource(source) polylineSource = source // Add a layer to style our polyline. let layer = MGLLineStyleLayer(identifier: \"polyline\", source: source) layer.lineJoin = NSExpression(forConstantValue: \"round\") layer.lineCap = NSExpression(forConstantValue: \"round\") layer.lineColor = NSExpression(forConstantValue: UIColor.systemBlue) // The line width should gradually increase based on the zoom level. layer.lineWidth = NSExpression(format: \"mgl_interpolate:withCurveType:parameters:stops:($zoomLevel, 'linear', nil, %@)\",[14: 5, 18: 20]) style.addLayer(layer) // Update polyline - remove if an animated polyline is desired let polyline = MGLPolylineFeature(coordinates: allCoordinates, count: UInt(allCoordinates.count)) polylineSource?.shape = polyline } func animatePolyline() { currentIndex = 1 // Start a timer that will simulate adding points to our polyline. This could also represent coordinates being added to our polyline from another source, such as a CLLocationManagerDelegate. timer = Timer.scheduledTimer(timeInterval: 0.05, target: self, selector: #selector(tick), userInfo: nil, repeats: true) } @objc func tick() { if currentIndex > allCoordinates.count { timer?.invalidate() timer = nil return } // Create a subarray of locations up to the current index. let coordinates = Array(allCoordinates[0..<currentIndex]) // Update our MGLShapeSource with the current locations. updatePolylineWithCoordinates(coordinates: coordinates) currentIndex += 1 } func updatePolylineWithCoordinates(coordinates: [CLLocationCoordinate2D]) { var mutableCoordinates = coordinates let polyline = MGLPolylineFeature(coordinates: &mutableCoordinates, count: UInt(mutableCoordinates.count)) // Updating the MGLShapeSource\u2019s shape will have the map redraw our polyline with the current coordinates. polylineSource?.shape = polyline } }","title":"Add geometry"},{"location":"Mapbox-ios/Add-a-marker/","text":"Add a marker Estimated reading time : 1 minutes Check out this code sample that uses the Mapbox GL iOS library to add a marker from GeoJSON onto your map. import UIKit import Mapbox class AddMarkerViewController: UIViewController, MGLMapViewDelegate { // Update the token here if you want to customize the token for this controller in your own project. // Otherwise update the value at the top of the main controller: ViewController.swift. // let accessToken = \"YOUR_ACCESS_TOKEN\" override func viewDidLoad() { super.viewDidLoad() // Initialize title title = \"Simple marker\" let url = URL(string: \"https://api.jawg.io/styles/jawg-sunny.json?access-token=\"+accessToken) let mapView = MGLMapView(frame: view.bounds, styleURL: url) mapView.autoresizingMask = [.flexibleWidth, .flexibleHeight] mapView.delegate = self mapView.logoView.isHidden = true // Set the map\u2019s center coordinate and zoom level. mapView.setCenter(CLLocationCoordinate2D(latitude: -33.865143, longitude: 151.209900), zoomLevel: 12, animated: false) // Add a point annotation let annotation = MGLPointAnnotation() annotation.coordinate = CLLocationCoordinate2D(latitude: -33.85416325, longitude: 151.20916) annotation.title = \"Opera House\" annotation.subtitle = \"The most beautiful opera house in the world!\" mapView.addAnnotation(annotation) view.addSubview(mapView) } func mapView(_ mapView: MGLMapView, annotationCanShowCallout annotation: MGLAnnotation) -> Bool { // Always allow callouts to popup when annotations are tapped. return true } }","title":"Add a marker"},{"location":"Mapbox-ios/Add-a-marker/#add-a-marker","text":"Estimated reading time : 1 minutes Check out this code sample that uses the Mapbox GL iOS library to add a marker from GeoJSON onto your map. import UIKit import Mapbox class AddMarkerViewController: UIViewController, MGLMapViewDelegate { // Update the token here if you want to customize the token for this controller in your own project. // Otherwise update the value at the top of the main controller: ViewController.swift. // let accessToken = \"YOUR_ACCESS_TOKEN\" override func viewDidLoad() { super.viewDidLoad() // Initialize title title = \"Simple marker\" let url = URL(string: \"https://api.jawg.io/styles/jawg-sunny.json?access-token=\"+accessToken) let mapView = MGLMapView(frame: view.bounds, styleURL: url) mapView.autoresizingMask = [.flexibleWidth, .flexibleHeight] mapView.delegate = self mapView.logoView.isHidden = true // Set the map\u2019s center coordinate and zoom level. mapView.setCenter(CLLocationCoordinate2D(latitude: -33.865143, longitude: 151.209900), zoomLevel: 12, animated: false) // Add a point annotation let annotation = MGLPointAnnotation() annotation.coordinate = CLLocationCoordinate2D(latitude: -33.85416325, longitude: 151.20916) annotation.title = \"Opera House\" annotation.subtitle = \"The most beautiful opera house in the world!\" mapView.addAnnotation(annotation) view.addSubview(mapView) } func mapView(_ mapView: MGLMapView, annotationCanShowCallout annotation: MGLAnnotation) -> Bool { // Always allow callouts to popup when annotations are tapped. return true } }","title":"Add a marker"},{"location":"Mapbox-ios/Change-language/","text":"Change the language of your map Estimated reading time : 1 minutes Check out this code sample that uses the Mapbox GL iOS library to change the language on your map. import UIKit import Mapbox class ChangeLanguageViewController: UIViewController, MGLMapViewDelegate, UIPickerViewDelegate, UIPickerViewDataSource { // Update the token here if you want to customize the token for this controller in your own project. // Otherwise update the value at the top of the main controller: ViewController.swift. // let accessToken = \"YOUR_ACCESS_TOKEN\" @IBOutlet weak var languagePicker: UIPickerView! @IBOutlet weak var changeLanguage: UIBarButtonItem! let languages = [\"en\",\"fr\",\"it\",\"es\",\"de\",\"nl\",\"zh\"] var mapView = MGLMapView() override func viewDidLoad() { super.viewDidLoad() // Initialize title and first style title = languages[0] // Initialize map let url = URL(string: \"https://api.jawg.io/styles/jawg-sunny.json?lang=\"+title!+\"&access-token=\"+accessToken) mapView = MGLMapView(frame: view.bounds, styleURL: url) mapView.autoresizingMask = [.flexibleWidth, .flexibleHeight] mapView.delegate = self mapView.logoView.isHidden = true // Set the map\u2019s center coordinate and zoom level. mapView.setCenter(CLLocationCoordinate2D(latitude: -33.865143, longitude: 151.209900), zoomLevel: 3, animated: false) // Add the map to the view view.addSubview(mapView) // Display picker on click button languagePicker.isHidden = true // Higher priority for the stylePicker view.layer.zPosition = 0 languagePicker.layer.zPosition = 10 } // Click button @IBAction func selected(_ sender: UIBarButtonItem) { mapView.isUserInteractionEnabled = false languagePicker.isHidden = !languagePicker.isHidden } // Click picker func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) { title = languages[row] mapView.styleURL = URL(string: \"https://api.jawg.io/styles/jawg-sunny.json?lang=\"+title!+\"&access-token=\"+accessToken) languagePicker.isHidden = true mapView.isUserInteractionEnabled = true } // Config - Initialize pickerView func numberOfComponents(in pickerView: UIPickerView) -> Int { return 1 } func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? { return languages[row] } func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int { return languages.count } }","title":"Change language"},{"location":"Mapbox-ios/Change-language/#change-the-language-of-your-map","text":"Estimated reading time : 1 minutes Check out this code sample that uses the Mapbox GL iOS library to change the language on your map. import UIKit import Mapbox class ChangeLanguageViewController: UIViewController, MGLMapViewDelegate, UIPickerViewDelegate, UIPickerViewDataSource { // Update the token here if you want to customize the token for this controller in your own project. // Otherwise update the value at the top of the main controller: ViewController.swift. // let accessToken = \"YOUR_ACCESS_TOKEN\" @IBOutlet weak var languagePicker: UIPickerView! @IBOutlet weak var changeLanguage: UIBarButtonItem! let languages = [\"en\",\"fr\",\"it\",\"es\",\"de\",\"nl\",\"zh\"] var mapView = MGLMapView() override func viewDidLoad() { super.viewDidLoad() // Initialize title and first style title = languages[0] // Initialize map let url = URL(string: \"https://api.jawg.io/styles/jawg-sunny.json?lang=\"+title!+\"&access-token=\"+accessToken) mapView = MGLMapView(frame: view.bounds, styleURL: url) mapView.autoresizingMask = [.flexibleWidth, .flexibleHeight] mapView.delegate = self mapView.logoView.isHidden = true // Set the map\u2019s center coordinate and zoom level. mapView.setCenter(CLLocationCoordinate2D(latitude: -33.865143, longitude: 151.209900), zoomLevel: 3, animated: false) // Add the map to the view view.addSubview(mapView) // Display picker on click button languagePicker.isHidden = true // Higher priority for the stylePicker view.layer.zPosition = 0 languagePicker.layer.zPosition = 10 } // Click button @IBAction func selected(_ sender: UIBarButtonItem) { mapView.isUserInteractionEnabled = false languagePicker.isHidden = !languagePicker.isHidden } // Click picker func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) { title = languages[row] mapView.styleURL = URL(string: \"https://api.jawg.io/styles/jawg-sunny.json?lang=\"+title!+\"&access-token=\"+accessToken) languagePicker.isHidden = true mapView.isUserInteractionEnabled = true } // Config - Initialize pickerView func numberOfComponents(in pickerView: UIPickerView) -> Int { return 1 } func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? { return languages[row] } func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int { return languages.count } }","title":"Change the language of your map"},{"location":"Mapbox-ios/Change-style/","text":"Change the style of your map Estimated reading time : 1 minutes Switch between the default Jawg styles for your map using this code sample that uses the Mapbox GL iOS library. import UIKit import Mapbox class ChangeStyleViewController: UIViewController, MGLMapViewDelegate, UIPickerViewDelegate, UIPickerViewDataSource { // Update the token here if you want to customize the token for this controller in your own project. // Otherwise update the value at the top of the main controller: ViewController.swift. // let accessToken = \"YOUR_ACCESS_TOKEN\" @IBOutlet weak var stylePicker: UIPickerView! @IBOutlet weak var changeStyle: UIBarButtonItem! let styles = [\"sunny\",\"dark\",\"terrain\",\"streets\",\"light\"] var mapView = MGLMapView() override func viewDidLoad() { super.viewDidLoad() // Initialize title and first style title = \"jawg-\"+styles[0] // Initialize map let url = URL(string: \"https://api.jawg.io/styles/\"+title!+\".json?access-token=\"+accessToken) mapView = MGLMapView(frame: view.bounds, styleURL: url) mapView.autoresizingMask = [.flexibleWidth, .flexibleHeight] mapView.delegate = self mapView.logoView.isHidden = true // Set the map\u2019s center coordinate and zoom level. mapView.setCenter(CLLocationCoordinate2D(latitude: -33.865143, longitude: 151.209900), zoomLevel: 12, animated: false) // Add the map to the view view.addSubview(mapView) // Display picker on click button stylePicker.isHidden = true // Higher priority for the stylePicker view.layer.zPosition = 0 stylePicker.layer.zPosition = 10 } // Click button @IBAction func selected(_ sender: UIBarButtonItem) { mapView.isUserInteractionEnabled = false stylePicker.isHidden = !stylePicker.isHidden } // Click picker func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) { title = \"jawg-\"+styles[row] mapView.styleURL = URL(string: \"https://api.jawg.io/styles/jawg-\"+styles[row]+\".json?access-token=\"+accessToken) stylePicker.isHidden = true mapView.isUserInteractionEnabled = true } // Config - Initialize pickerView func numberOfComponents(in pickerView: UIPickerView) -> Int { return 1 } func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? { return styles[row] } func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int { return styles.count } }","title":"Change style"},{"location":"Mapbox-ios/Change-style/#change-the-style-of-your-map","text":"Estimated reading time : 1 minutes Switch between the default Jawg styles for your map using this code sample that uses the Mapbox GL iOS library. import UIKit import Mapbox class ChangeStyleViewController: UIViewController, MGLMapViewDelegate, UIPickerViewDelegate, UIPickerViewDataSource { // Update the token here if you want to customize the token for this controller in your own project. // Otherwise update the value at the top of the main controller: ViewController.swift. // let accessToken = \"YOUR_ACCESS_TOKEN\" @IBOutlet weak var stylePicker: UIPickerView! @IBOutlet weak var changeStyle: UIBarButtonItem! let styles = [\"sunny\",\"dark\",\"terrain\",\"streets\",\"light\"] var mapView = MGLMapView() override func viewDidLoad() { super.viewDidLoad() // Initialize title and first style title = \"jawg-\"+styles[0] // Initialize map let url = URL(string: \"https://api.jawg.io/styles/\"+title!+\".json?access-token=\"+accessToken) mapView = MGLMapView(frame: view.bounds, styleURL: url) mapView.autoresizingMask = [.flexibleWidth, .flexibleHeight] mapView.delegate = self mapView.logoView.isHidden = true // Set the map\u2019s center coordinate and zoom level. mapView.setCenter(CLLocationCoordinate2D(latitude: -33.865143, longitude: 151.209900), zoomLevel: 12, animated: false) // Add the map to the view view.addSubview(mapView) // Display picker on click button stylePicker.isHidden = true // Higher priority for the stylePicker view.layer.zPosition = 0 stylePicker.layer.zPosition = 10 } // Click button @IBAction func selected(_ sender: UIBarButtonItem) { mapView.isUserInteractionEnabled = false stylePicker.isHidden = !stylePicker.isHidden } // Click picker func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) { title = \"jawg-\"+styles[row] mapView.styleURL = URL(string: \"https://api.jawg.io/styles/jawg-\"+styles[row]+\".json?access-token=\"+accessToken) stylePicker.isHidden = true mapView.isUserInteractionEnabled = true } // Config - Initialize pickerView func numberOfComponents(in pickerView: UIPickerView) -> Int { return 1 } func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? { return styles[row] } func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int { return styles.count } }","title":"Change the style of your map"},{"location":"Mapbox-ios/Display-a-popup/","text":"Display a popup Estimated reading time : 1 minutes Check out this code sample that uses the Mapbox GL iOS library to add a popup over your map data points. import UIKit import Mapbox class AddPopupViewController: UIViewController, MGLMapViewDelegate { // Update the token here if you want to customize the token for this controller in your own project. // Otherwise update the value at the top of the main controller: ViewController.swift. // let accessToken = \"YOUR_ACCESS_TOKEN\" var mapView = MGLMapView() override func viewDidLoad() { super.viewDidLoad() // Initialize title title = \"Custom Popup\" // Initialize map let url = URL(string: \"https://api.jawg.io/styles/jawg-sunny.json?access-token=\"+accessToken) mapView = MGLMapView(frame: view.bounds, styleURL: url) mapView.autoresizingMask = [.flexibleWidth, .flexibleHeight] mapView.delegate = self mapView.logoView.isHidden = true // Set the map\u2019s center coordinate and zoom level. mapView.setCenter(CLLocationCoordinate2D(latitude: -33.865143, longitude: 151.209900), zoomLevel: 11, animated: false) // Add an annotation let operaHouseAnnotation = CustomAnnotation(coordinate: CLLocationCoordinate2D(latitude: -33.85416325, longitude: 151.20916),title: \"Opera House\",subtitle: \"The most beautiful opera house in the world!\",image: UIImage(named: \"operaHouse.jpeg\")!) mapView.addAnnotation(operaHouseAnnotation) // Add an annotation let sydneyParkAnnotation = CustomAnnotation(coordinate: CLLocationCoordinate2D(latitude: -33.9105284, longitude: 151.1846209),title: \"Sydney Park\",subtitle: \"The open space is made of 40 hectares of lush grass\",image: UIImage(named: \"sydneyPark.jpeg\")!) mapView.addAnnotation(sydneyParkAnnotation) // Add an annotation let bondiBeachAnnotation = CustomAnnotation(coordinate: CLLocationCoordinate2D(latitude: -33.890842, longitude: 151.274292),title: \"Bondi Beach\",subtitle: \"Do not forget your surfboard\",image: UIImage(named: \"bondiBeach.jpeg\")!) mapView.addAnnotation(bondiBeachAnnotation) // Add the map to the view view.addSubview(mapView) } // This delegate method is where you tell the map to load a view for a specific annotation. To load a static MGLAnnotationImage, you would use `-mapView:imageForAnnotation:`. func mapView(_ mapView: MGLMapView, viewFor annotation: MGLAnnotation) -> MGLAnnotationView? { // This example is only concerned with point annotations. guard annotation is CustomAnnotation else { return nil } // Use the point annotation\u2019s longitude value (as a string) as the reuse identifier for its view. let reuseIdentifier = \"\\(annotation.coordinate.longitude)\" // For better performance, always try to reuse existing annotations. var annotationView = mapView.dequeueReusableAnnotationView(withIdentifier: reuseIdentifier) // If there\u2019s no reusable annotation view available, initialize a new one. if annotationView == nil { annotationView = CustomAnnotationView(annotation: annotation, reuseIdentifier: reuseIdentifier) annotationView!.bounds = CGRect(x: 0, y: 0, width: 40, height: 40) // Set the annotation view\u2019s background color to a value determined by its longitude. let hue = CGFloat(annotation.coordinate.longitude) / 100 annotationView!.backgroundColor = UIColor(hue: hue, saturation: 0.5, brightness: 1, alpha: 1) } return annotationView } func mapView(_ mapView: MGLMapView, annotationCanShowCallout annotation: MGLAnnotation) -> Bool { return true } func mapView(_ mapView: MGLMapView, calloutViewFor annotation: MGLAnnotation) -> MGLCalloutView? { // Instantiate and return our custom callout view. return CustomCalloutView(annotation: annotation as! CustomAnnotation) } func mapView(_ mapView: MGLMapView, tapOnCalloutFor annotation: MGLAnnotation) { // Optionally handle taps on the callout. print(\"Tapped the callout for: \\(annotation)\") // Hide the callout. mapView.deselectAnnotation(annotation, animated: true) } } class CustomAnnotation: NSObject, MGLAnnotation { var coordinate: CLLocationCoordinate2D var title: String? var subtitle: String? var image: UIImage init(coordinate: CLLocationCoordinate2D, title: String, subtitle: String, image: UIImage) { self.coordinate = coordinate self.title = title self.subtitle = subtitle self.image = image } } // MGLAnnotationView subclass class CustomAnnotationView: MGLAnnotationView { override init(annotation: MGLAnnotation?, reuseIdentifier: String?) { super.init(annotation: annotation, reuseIdentifier: reuseIdentifier) } required init?(coder aDecoder: NSCoder) { super.init(coder: aDecoder) } override func layoutSubviews() { super.layoutSubviews() // Use CALayer\u2019s corner radius to turn this view into a circle. layer.cornerRadius = bounds.width / 2 layer.borderWidth = 2 layer.borderColor = UIColor.white.cgColor } override func setSelected(_ selected: Bool, animated: Bool) { super.setSelected(selected, animated: animated) // Animate the border width in/out, creating an iris effect. let animation = CABasicAnimation(keyPath: \"borderWidth\") animation.duration = 0.1 layer.borderWidth = selected ? bounds.width / 4 : 2 layer.add(animation, forKey: \"borderWidth\") } } class CustomCalloutView: UIView, MGLCalloutView { var representedObject: MGLAnnotation // Required views but unused for now, they can just relax lazy var leftAccessoryView = UIView() lazy var rightAccessoryView = UIView() weak var delegate: MGLCalloutViewDelegate? //MARK: Subviews - let titleLabel:UILabel = { let label = UILabel() label.translatesAutoresizingMaskIntoConstraints = false label.font = UIFont.boldSystemFont(ofSize: 17.0) return label }() let subtitleLabel:UILabel = { let label = UILabel() label.translatesAutoresizingMaskIntoConstraints = false return label }() let imageView:UIImageView = { let imageview = UIImageView(frame: CGRect(x: 0, y: 0, width: 25, height: 25)) imageview.translatesAutoresizingMaskIntoConstraints = false imageview.contentMode = .scaleAspectFit return imageview }() required init(annotation: CustomAnnotation) { self.representedObject = annotation // init with 100% of width and 200px tall super.init(frame: CGRect(origin: CGPoint(), size: CGSize(width: UIScreen.main.bounds.width, height: 200))) self.titleLabel.text = self.representedObject.title ?? \"\" self.subtitleLabel.text = self.representedObject.subtitle ?? \"\" self.imageView.image = annotation.image setup() } required init?(coder decoder: NSCoder) { fatalError(\"init(coder:) has not been implemented\") } func setup() { // setup this view's properties self.backgroundColor = UIColor.white // And their Subviews self.addSubview(titleLabel) self.addSubview(subtitleLabel) self.addSubview(imageView) // Add Constraints to subviews let spacing:CGFloat = 8.0 imageView.topAnchor.constraint(equalTo: self.topAnchor, constant: spacing).isActive = true imageView.leftAnchor.constraint(equalTo: self.leftAnchor, constant: spacing).isActive = true imageView.heightAnchor.constraint(equalToConstant: 52.0).isActive = true imageView.widthAnchor.constraint(equalToConstant: 52.0).isActive = true titleLabel.topAnchor.constraint(equalTo: self.topAnchor, constant: spacing).isActive = true titleLabel.leftAnchor.constraint(equalTo: self.imageView.rightAnchor, constant: spacing * 2).isActive = true titleLabel.rightAnchor.constraint(equalTo: self.rightAnchor, constant: -spacing).isActive = true titleLabel.heightAnchor.constraint(equalToConstant: 50.0).isActive = true subtitleLabel.topAnchor.constraint(equalTo: self.titleLabel.bottomAnchor, constant: spacing).isActive = true subtitleLabel.leftAnchor.constraint(equalTo: self.leftAnchor, constant: spacing).isActive = true subtitleLabel.rightAnchor.constraint(equalTo: self.rightAnchor, constant: -spacing).isActive = true subtitleLabel.heightAnchor.constraint(equalToConstant: 20.0).isActive = true } func presentCallout(from rect: CGRect, in view: UIView, constrainedTo constrainedRect: CGRect, animated: Bool) { //Center bottom self.center = view.center.applying(CGAffineTransform(translationX: 0, y: view.bounds.height/2 - self.bounds.height/2)) view.addSubview(self) } func dismissCallout(animated: Bool) { if (animated){ //Implement animation here removeFromSuperview() } else { removeFromSuperview() } } }","title":"Display a popup"},{"location":"Mapbox-ios/Display-a-popup/#display-a-popup","text":"Estimated reading time : 1 minutes Check out this code sample that uses the Mapbox GL iOS library to add a popup over your map data points. import UIKit import Mapbox class AddPopupViewController: UIViewController, MGLMapViewDelegate { // Update the token here if you want to customize the token for this controller in your own project. // Otherwise update the value at the top of the main controller: ViewController.swift. // let accessToken = \"YOUR_ACCESS_TOKEN\" var mapView = MGLMapView() override func viewDidLoad() { super.viewDidLoad() // Initialize title title = \"Custom Popup\" // Initialize map let url = URL(string: \"https://api.jawg.io/styles/jawg-sunny.json?access-token=\"+accessToken) mapView = MGLMapView(frame: view.bounds, styleURL: url) mapView.autoresizingMask = [.flexibleWidth, .flexibleHeight] mapView.delegate = self mapView.logoView.isHidden = true // Set the map\u2019s center coordinate and zoom level. mapView.setCenter(CLLocationCoordinate2D(latitude: -33.865143, longitude: 151.209900), zoomLevel: 11, animated: false) // Add an annotation let operaHouseAnnotation = CustomAnnotation(coordinate: CLLocationCoordinate2D(latitude: -33.85416325, longitude: 151.20916),title: \"Opera House\",subtitle: \"The most beautiful opera house in the world!\",image: UIImage(named: \"operaHouse.jpeg\")!) mapView.addAnnotation(operaHouseAnnotation) // Add an annotation let sydneyParkAnnotation = CustomAnnotation(coordinate: CLLocationCoordinate2D(latitude: -33.9105284, longitude: 151.1846209),title: \"Sydney Park\",subtitle: \"The open space is made of 40 hectares of lush grass\",image: UIImage(named: \"sydneyPark.jpeg\")!) mapView.addAnnotation(sydneyParkAnnotation) // Add an annotation let bondiBeachAnnotation = CustomAnnotation(coordinate: CLLocationCoordinate2D(latitude: -33.890842, longitude: 151.274292),title: \"Bondi Beach\",subtitle: \"Do not forget your surfboard\",image: UIImage(named: \"bondiBeach.jpeg\")!) mapView.addAnnotation(bondiBeachAnnotation) // Add the map to the view view.addSubview(mapView) } // This delegate method is where you tell the map to load a view for a specific annotation. To load a static MGLAnnotationImage, you would use `-mapView:imageForAnnotation:`. func mapView(_ mapView: MGLMapView, viewFor annotation: MGLAnnotation) -> MGLAnnotationView? { // This example is only concerned with point annotations. guard annotation is CustomAnnotation else { return nil } // Use the point annotation\u2019s longitude value (as a string) as the reuse identifier for its view. let reuseIdentifier = \"\\(annotation.coordinate.longitude)\" // For better performance, always try to reuse existing annotations. var annotationView = mapView.dequeueReusableAnnotationView(withIdentifier: reuseIdentifier) // If there\u2019s no reusable annotation view available, initialize a new one. if annotationView == nil { annotationView = CustomAnnotationView(annotation: annotation, reuseIdentifier: reuseIdentifier) annotationView!.bounds = CGRect(x: 0, y: 0, width: 40, height: 40) // Set the annotation view\u2019s background color to a value determined by its longitude. let hue = CGFloat(annotation.coordinate.longitude) / 100 annotationView!.backgroundColor = UIColor(hue: hue, saturation: 0.5, brightness: 1, alpha: 1) } return annotationView } func mapView(_ mapView: MGLMapView, annotationCanShowCallout annotation: MGLAnnotation) -> Bool { return true } func mapView(_ mapView: MGLMapView, calloutViewFor annotation: MGLAnnotation) -> MGLCalloutView? { // Instantiate and return our custom callout view. return CustomCalloutView(annotation: annotation as! CustomAnnotation) } func mapView(_ mapView: MGLMapView, tapOnCalloutFor annotation: MGLAnnotation) { // Optionally handle taps on the callout. print(\"Tapped the callout for: \\(annotation)\") // Hide the callout. mapView.deselectAnnotation(annotation, animated: true) } } class CustomAnnotation: NSObject, MGLAnnotation { var coordinate: CLLocationCoordinate2D var title: String? var subtitle: String? var image: UIImage init(coordinate: CLLocationCoordinate2D, title: String, subtitle: String, image: UIImage) { self.coordinate = coordinate self.title = title self.subtitle = subtitle self.image = image } } // MGLAnnotationView subclass class CustomAnnotationView: MGLAnnotationView { override init(annotation: MGLAnnotation?, reuseIdentifier: String?) { super.init(annotation: annotation, reuseIdentifier: reuseIdentifier) } required init?(coder aDecoder: NSCoder) { super.init(coder: aDecoder) } override func layoutSubviews() { super.layoutSubviews() // Use CALayer\u2019s corner radius to turn this view into a circle. layer.cornerRadius = bounds.width / 2 layer.borderWidth = 2 layer.borderColor = UIColor.white.cgColor } override func setSelected(_ selected: Bool, animated: Bool) { super.setSelected(selected, animated: animated) // Animate the border width in/out, creating an iris effect. let animation = CABasicAnimation(keyPath: \"borderWidth\") animation.duration = 0.1 layer.borderWidth = selected ? bounds.width / 4 : 2 layer.add(animation, forKey: \"borderWidth\") } } class CustomCalloutView: UIView, MGLCalloutView { var representedObject: MGLAnnotation // Required views but unused for now, they can just relax lazy var leftAccessoryView = UIView() lazy var rightAccessoryView = UIView() weak var delegate: MGLCalloutViewDelegate? //MARK: Subviews - let titleLabel:UILabel = { let label = UILabel() label.translatesAutoresizingMaskIntoConstraints = false label.font = UIFont.boldSystemFont(ofSize: 17.0) return label }() let subtitleLabel:UILabel = { let label = UILabel() label.translatesAutoresizingMaskIntoConstraints = false return label }() let imageView:UIImageView = { let imageview = UIImageView(frame: CGRect(x: 0, y: 0, width: 25, height: 25)) imageview.translatesAutoresizingMaskIntoConstraints = false imageview.contentMode = .scaleAspectFit return imageview }() required init(annotation: CustomAnnotation) { self.representedObject = annotation // init with 100% of width and 200px tall super.init(frame: CGRect(origin: CGPoint(), size: CGSize(width: UIScreen.main.bounds.width, height: 200))) self.titleLabel.text = self.representedObject.title ?? \"\" self.subtitleLabel.text = self.representedObject.subtitle ?? \"\" self.imageView.image = annotation.image setup() } required init?(coder decoder: NSCoder) { fatalError(\"init(coder:) has not been implemented\") } func setup() { // setup this view's properties self.backgroundColor = UIColor.white // And their Subviews self.addSubview(titleLabel) self.addSubview(subtitleLabel) self.addSubview(imageView) // Add Constraints to subviews let spacing:CGFloat = 8.0 imageView.topAnchor.constraint(equalTo: self.topAnchor, constant: spacing).isActive = true imageView.leftAnchor.constraint(equalTo: self.leftAnchor, constant: spacing).isActive = true imageView.heightAnchor.constraint(equalToConstant: 52.0).isActive = true imageView.widthAnchor.constraint(equalToConstant: 52.0).isActive = true titleLabel.topAnchor.constraint(equalTo: self.topAnchor, constant: spacing).isActive = true titleLabel.leftAnchor.constraint(equalTo: self.imageView.rightAnchor, constant: spacing * 2).isActive = true titleLabel.rightAnchor.constraint(equalTo: self.rightAnchor, constant: -spacing).isActive = true titleLabel.heightAnchor.constraint(equalToConstant: 50.0).isActive = true subtitleLabel.topAnchor.constraint(equalTo: self.titleLabel.bottomAnchor, constant: spacing).isActive = true subtitleLabel.leftAnchor.constraint(equalTo: self.leftAnchor, constant: spacing).isActive = true subtitleLabel.rightAnchor.constraint(equalTo: self.rightAnchor, constant: -spacing).isActive = true subtitleLabel.heightAnchor.constraint(equalToConstant: 20.0).isActive = true } func presentCallout(from rect: CGRect, in view: UIView, constrainedTo constrainedRect: CGRect, animated: Bool) { //Center bottom self.center = view.center.applying(CGAffineTransform(translationX: 0, y: view.bounds.height/2 - self.bounds.height/2)) view.addSubview(self) } func dismissCallout(animated: Bool) { if (animated){ //Implement animation here removeFromSuperview() } else { removeFromSuperview() } } }","title":"Display a popup"},{"location":"Mapbox-ios/Quickstart/","text":"Mapbox GL iOS Estimated reading time : 1 minutes Prerequisite For all of our examples, you will need: An API key and MapSaudi account ( from the platform ), knowledge in Swift/iOS development, One style (default or custom style) Get the library There are several ways to get this library: from the github repository ( github.com/mapbox/mapbox-gl-native-ios ) from cocoapods.org (pod name: Mapbox-iOS-SDK ) Attribution Your map must display the following links: MapSaudi and \u00a9 OpenStreetMap . This is our attribution template: <a href=\"https://basemaps.mapsaudi.com/\" title=\"Tiles Courtesy of MapSaudi Maps\" target=\"_blank\" class=\"jawg-attrib\" >&copy; <b>MapSaudi</b>Maps</a> | <a href=\"https://www.openstreetmap.org/copyright\" title=\"OpenStreetMap is open data licensed under ODbL\" target=\"_blank\" class=\"osm-attrib\" >&copy; OSM contributors</a> Since we are not using mapbox, you should also hide the mapbox logo (mapbox:mapbox_uiLogo set to false). Our examples simple-map : Simple map integration add-marker : Add a marker on your map add-geometry : Add a geometry from GeoJSON on your map add-popup : Add a popup on your map change-language : Change your map's language change-style : Change your map style (with our default styles) custom-style : Use a custom style from MapSaudi Lab","title":"Quickstart"},{"location":"Mapbox-ios/Quickstart/#mapbox-gl-ios","text":"Estimated reading time : 1 minutes","title":"Mapbox GL iOS"},{"location":"Mapbox-ios/Quickstart/#prerequisite","text":"For all of our examples, you will need: An API key and MapSaudi account ( from the platform ), knowledge in Swift/iOS development, One style (default or custom style)","title":"Prerequisite"},{"location":"Mapbox-ios/Quickstart/#get-the-library","text":"There are several ways to get this library: from the github repository ( github.com/mapbox/mapbox-gl-native-ios ) from cocoapods.org (pod name: Mapbox-iOS-SDK )","title":"Get the library"},{"location":"Mapbox-ios/Quickstart/#attribution","text":"Your map must display the following links: MapSaudi and \u00a9 OpenStreetMap . This is our attribution template: <a href=\"https://basemaps.mapsaudi.com/\" title=\"Tiles Courtesy of MapSaudi Maps\" target=\"_blank\" class=\"jawg-attrib\" >&copy; <b>MapSaudi</b>Maps</a> | <a href=\"https://www.openstreetmap.org/copyright\" title=\"OpenStreetMap is open data licensed under ODbL\" target=\"_blank\" class=\"osm-attrib\" >&copy; OSM contributors</a> Since we are not using mapbox, you should also hide the mapbox logo (mapbox:mapbox_uiLogo set to false).","title":"Attribution"},{"location":"Mapbox-ios/Quickstart/#our-examples","text":"simple-map : Simple map integration add-marker : Add a marker on your map add-geometry : Add a geometry from GeoJSON on your map add-popup : Add a popup on your map change-language : Change your map's language change-style : Change your map style (with our default styles) custom-style : Use a custom style from MapSaudi Lab","title":"Our examples"},{"location":"Mapbox-ios/Simple-map/","text":"Simple map integration on iOS Estimated reading time : 1 minutes Check out this code sample that uses the Mapbox GL iOS library to integrate a simple map onto your app. import UIKit import Mapbox class SimpleMapViewController: UIViewController, MGLMapViewDelegate{ // Update the token here if you want to customize the token for this controller in your own project. // Otherwise update the value at the top of the main controller: ViewController.swift. // let accessToken = \"YOUR_ACCESS_TOKEN\" override func viewDidLoad() { super.viewDidLoad() // Initialize title title = \"Simple street map\" let url = URL(string: \"https://api.jawg.io/styles/jawg-streets.json?access-token=\"+accessToken) let mapView = MGLMapView(frame: view.bounds, styleURL: url) mapView.autoresizingMask = [.flexibleWidth, .flexibleHeight] mapView.delegate = self mapView.logoView.isHidden = true // Set the map\u2019s center coordinate and zoom level. mapView.setCenter(CLLocationCoordinate2D(latitude: -33.865143, longitude: 151.209900), zoomLevel: 12, animated: false) view.addSubview(mapView) } }","title":"Simple map"},{"location":"Mapbox-ios/Simple-map/#simple-map-integration-on-ios","text":"Estimated reading time : 1 minutes Check out this code sample that uses the Mapbox GL iOS library to integrate a simple map onto your app. import UIKit import Mapbox class SimpleMapViewController: UIViewController, MGLMapViewDelegate{ // Update the token here if you want to customize the token for this controller in your own project. // Otherwise update the value at the top of the main controller: ViewController.swift. // let accessToken = \"YOUR_ACCESS_TOKEN\" override func viewDidLoad() { super.viewDidLoad() // Initialize title title = \"Simple street map\" let url = URL(string: \"https://api.jawg.io/styles/jawg-streets.json?access-token=\"+accessToken) let mapView = MGLMapView(frame: view.bounds, styleURL: url) mapView.autoresizingMask = [.flexibleWidth, .flexibleHeight] mapView.delegate = self mapView.logoView.isHidden = true // Set the map\u2019s center coordinate and zoom level. mapView.setCenter(CLLocationCoordinate2D(latitude: -33.865143, longitude: 151.209900), zoomLevel: 12, animated: false) view.addSubview(mapView) } }","title":"Simple map integration on iOS"},{"location":"Mapbox-ios/Use-a-custom-style/","text":"Use a custom style from MapSaudi Lab Estimated reading time : 1 minutes Check out this code sample that allows you to add a custom style to your map, using the Mapbox GL iOS library. import UIKit import Mapbox class CustomStyleViewController: UIViewController, MGLMapViewDelegate { // Update the token here if you want to customize the token for this controller in your own project. // Otherwise update the value at the top of the main controller: ViewController.swift. // let accessToken = \"YOUR_ACCESS_TOKEN\" // let customStyleId = \"YOUR_CUSTOM_STYLE_ID\" var mapView = MGLMapView() override func viewDidLoad() { super.viewDidLoad() // Initialize title title = \"Custom style\" // Initialize map let url = URL(string: \"https://api.jawg.io/styles/\"+customStyleId+\".json?access-token=\"+accessToken) mapView = MGLMapView(frame: view.bounds, styleURL: url) mapView.autoresizingMask = [.flexibleWidth, .flexibleHeight] mapView.delegate = self mapView.logoView.isHidden = true // Set the map\u2019s center coordinate and zoom level. mapView.setCenter(CLLocationCoordinate2D(latitude: -33.865143, longitude: 151.209900), zoomLevel: 13, animated: false) // Add the map to the view view.addSubview(mapView) } }","title":"Use a custom style"},{"location":"Mapbox-ios/Use-a-custom-style/#use-a-custom-style-from-mapsaudi-lab","text":"Estimated reading time : 1 minutes Check out this code sample that allows you to add a custom style to your map, using the Mapbox GL iOS library. import UIKit import Mapbox class CustomStyleViewController: UIViewController, MGLMapViewDelegate { // Update the token here if you want to customize the token for this controller in your own project. // Otherwise update the value at the top of the main controller: ViewController.swift. // let accessToken = \"YOUR_ACCESS_TOKEN\" // let customStyleId = \"YOUR_CUSTOM_STYLE_ID\" var mapView = MGLMapView() override func viewDidLoad() { super.viewDidLoad() // Initialize title title = \"Custom style\" // Initialize map let url = URL(string: \"https://api.jawg.io/styles/\"+customStyleId+\".json?access-token=\"+accessToken) mapView = MGLMapView(frame: view.bounds, styleURL: url) mapView.autoresizingMask = [.flexibleWidth, .flexibleHeight] mapView.delegate = self mapView.logoView.isHidden = true // Set the map\u2019s center coordinate and zoom level. mapView.setCenter(CLLocationCoordinate2D(latitude: -33.865143, longitude: 151.209900), zoomLevel: 13, animated: false) // Add the map to the view view.addSubview(mapView) } }","title":"Use a custom style from MapSaudi Lab"},{"location":"Maplibre-android/Add-Geometry/","text":"Add geometry Estimated reading time : 1 minutes Check out this code sample that uses the MapLibre GL Android library to add a geometry from GeoJSON onto your map. package io.jawg import android.os.Build import android.os.Bundle import androidx.annotation.RequiresApi import androidx.appcompat.app.AppCompatActivity import com.mapbox.geojson.Feature import com.mapbox.mapboxsdk.Mapbox import com.mapbox.mapboxsdk.maps.MapView import com.mapbox.mapboxsdk.style.layers.LineLayer import com.mapbox.mapboxsdk.style.layers.Property import com.mapbox.mapboxsdk.style.layers.PropertyFactory import com.mapbox.mapboxsdk.style.sources.GeoJsonSource class GeometryMapActivity : AppCompatActivity() { private var mapView: MapView? = null // Returns the Jawg url depending on the style given (jawg-streets by default) // See /res/values/strings which contains the url, the list of styles and your access token. private fun makeStyleUrl(style: String = \"jawg-streets\"): String { return \"${getString(R.string.jawg_styles_url) + style}.json?access-token=${getString(R.string.jawg_access_token)}\"; } @RequiresApi(Build.VERSION_CODES.M) override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) // Get the Mapbox context. Mapbox.getInstance(this) // Then set the activity layout setContentView(R.layout.activity_geometry_map) // We get the map view to set its style with the desired Jawg url. mapView = findViewById(R.id.mapView) mapView?.onCreate(savedInstanceState) mapView?.getMapAsync { map -> map.setStyle(makeStyleUrl()) { // Map fully loaded in this scope. // Update attributions position map.uiSettings.setAttributionMargins(15, 0, 0, 15) // We create a GeoJSON polygon containing the coordinates we want to be parsed. val polygonFeatureJson = \"\"\" { \"type\": \"Feature\", \"properties\": {}, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [2.319887,48.90046],[2.329981,48.901163], [2.38515,48.902008],[2.394906,48.898444], [2.397627,48.894578],[2.398846,48.887109], [2.408308,48.880409],[2.41327,48.872892], [2.413838,48.864376],[2.416341,48.849234], [2.412246,48.834539],[2.422139,48.835798], [2.41939,48.842577],[2.42813,48.841528], [2.447699,48.844818],[2.463438,48.842089], [2.467426,48.838891],[2.467582,48.833133], [2.462696,48.81906],[2.458705,48.81714], [2.438448,48.818232],[2.421462,48.824054], [2.406032,48.827615],[2.390939,48.826079], [2.379296,48.821214],[2.363947,48.816314], [2.345958,48.816036],[2.331898,48.817011], [2.332461,48.818247],[2.292196,48.827142], [2.279052,48.83249],[2.272793,48.82792], [2.263174,48.83398],[2.255144,48.83481], [2.251709,48.838822],[2.250612,48.845555], [2.239978,48.849702],[2.224219,48.853517], [2.228225,48.865183],[2.231736,48.869069], [2.245678,48.876435],[2.25541,48.874264], [2.258467,48.880387],[2.277487,48.877968], [2.282327,48.883923],[2.291507,48.889472], [2.319887,48.90046] ] ] } } \"\"\" // Create feature object from the GeoJSON we declared. val parisBoundariesFeature = Feature.fromJson(polygonFeatureJson) // Create a GeoJson Source from our feature. val geoJsonSource = GeoJsonSource(\"geojson-paris-boundaries\", parisBoundariesFeature) // Add it to the map it.addSource(geoJsonSource) // Create a layer with the desired style for our source. val layer = LineLayer(\"linelayer\", \"geojson-paris-boundaries\") .withProperties( PropertyFactory.lineCap(Property.LINE_CAP_SQUARE), PropertyFactory.lineJoin(Property.LINE_JOIN_MITER), PropertyFactory.lineOpacity(.7f), PropertyFactory.lineWidth(4f), PropertyFactory.lineColor(getColor(R.color.colorPrimaryDark)) ) // Add it to the map it.addLayer(layer) } } } override fun onStart() { super.onStart() mapView?.onStart() } override fun onResume() { super.onResume() mapView?.onResume() } override fun onPause() { super.onPause() mapView?.onPause() } override fun onStop() { super.onStop() mapView?.onStop() } override fun onLowMemory() { super.onLowMemory() mapView?.onLowMemory() } override fun onDestroy() { super.onDestroy() mapView?.onDestroy() } }","title":"Add your data"},{"location":"Maplibre-android/Add-Geometry/#add-geometry","text":"Estimated reading time : 1 minutes Check out this code sample that uses the MapLibre GL Android library to add a geometry from GeoJSON onto your map. package io.jawg import android.os.Build import android.os.Bundle import androidx.annotation.RequiresApi import androidx.appcompat.app.AppCompatActivity import com.mapbox.geojson.Feature import com.mapbox.mapboxsdk.Mapbox import com.mapbox.mapboxsdk.maps.MapView import com.mapbox.mapboxsdk.style.layers.LineLayer import com.mapbox.mapboxsdk.style.layers.Property import com.mapbox.mapboxsdk.style.layers.PropertyFactory import com.mapbox.mapboxsdk.style.sources.GeoJsonSource class GeometryMapActivity : AppCompatActivity() { private var mapView: MapView? = null // Returns the Jawg url depending on the style given (jawg-streets by default) // See /res/values/strings which contains the url, the list of styles and your access token. private fun makeStyleUrl(style: String = \"jawg-streets\"): String { return \"${getString(R.string.jawg_styles_url) + style}.json?access-token=${getString(R.string.jawg_access_token)}\"; } @RequiresApi(Build.VERSION_CODES.M) override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) // Get the Mapbox context. Mapbox.getInstance(this) // Then set the activity layout setContentView(R.layout.activity_geometry_map) // We get the map view to set its style with the desired Jawg url. mapView = findViewById(R.id.mapView) mapView?.onCreate(savedInstanceState) mapView?.getMapAsync { map -> map.setStyle(makeStyleUrl()) { // Map fully loaded in this scope. // Update attributions position map.uiSettings.setAttributionMargins(15, 0, 0, 15) // We create a GeoJSON polygon containing the coordinates we want to be parsed. val polygonFeatureJson = \"\"\" { \"type\": \"Feature\", \"properties\": {}, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [2.319887,48.90046],[2.329981,48.901163], [2.38515,48.902008],[2.394906,48.898444], [2.397627,48.894578],[2.398846,48.887109], [2.408308,48.880409],[2.41327,48.872892], [2.413838,48.864376],[2.416341,48.849234], [2.412246,48.834539],[2.422139,48.835798], [2.41939,48.842577],[2.42813,48.841528], [2.447699,48.844818],[2.463438,48.842089], [2.467426,48.838891],[2.467582,48.833133], [2.462696,48.81906],[2.458705,48.81714], [2.438448,48.818232],[2.421462,48.824054], [2.406032,48.827615],[2.390939,48.826079], [2.379296,48.821214],[2.363947,48.816314], [2.345958,48.816036],[2.331898,48.817011], [2.332461,48.818247],[2.292196,48.827142], [2.279052,48.83249],[2.272793,48.82792], [2.263174,48.83398],[2.255144,48.83481], [2.251709,48.838822],[2.250612,48.845555], [2.239978,48.849702],[2.224219,48.853517], [2.228225,48.865183],[2.231736,48.869069], [2.245678,48.876435],[2.25541,48.874264], [2.258467,48.880387],[2.277487,48.877968], [2.282327,48.883923],[2.291507,48.889472], [2.319887,48.90046] ] ] } } \"\"\" // Create feature object from the GeoJSON we declared. val parisBoundariesFeature = Feature.fromJson(polygonFeatureJson) // Create a GeoJson Source from our feature. val geoJsonSource = GeoJsonSource(\"geojson-paris-boundaries\", parisBoundariesFeature) // Add it to the map it.addSource(geoJsonSource) // Create a layer with the desired style for our source. val layer = LineLayer(\"linelayer\", \"geojson-paris-boundaries\") .withProperties( PropertyFactory.lineCap(Property.LINE_CAP_SQUARE), PropertyFactory.lineJoin(Property.LINE_JOIN_MITER), PropertyFactory.lineOpacity(.7f), PropertyFactory.lineWidth(4f), PropertyFactory.lineColor(getColor(R.color.colorPrimaryDark)) ) // Add it to the map it.addLayer(layer) } } } override fun onStart() { super.onStart() mapView?.onStart() } override fun onResume() { super.onResume() mapView?.onResume() } override fun onPause() { super.onPause() mapView?.onPause() } override fun onStop() { super.onStop() mapView?.onStop() } override fun onLowMemory() { super.onLowMemory() mapView?.onLowMemory() } override fun onDestroy() { super.onDestroy() mapView?.onDestroy() } }","title":"Add geometry"},{"location":"Maplibre-android/Add-a-marker/","text":"Add a marker Estimated reading time : 1 minutes Check out this code sample that uses the MapLibre GL Android library to add a marker from GeoJSON onto your map. package io.jawg import android.os.Bundle import android.widget.Toast import androidx.appcompat.app.AppCompatActivity import androidx.core.content.res.ResourcesCompat import com.mapbox.mapboxsdk.Mapbox import com.mapbox.mapboxsdk.geometry.LatLng import com.mapbox.mapboxsdk.maps.MapView import com.mapbox.mapboxsdk.plugins.annotation.SymbolManager import com.mapbox.mapboxsdk.plugins.annotation.SymbolOptions import com.mapbox.mapboxsdk.utils.BitmapUtils class MarkerMapActivity : AppCompatActivity() { companion object { private const val MARKER_ICON = \"MARKER_ICON\" } private var mapView: MapView? = null private var symbolManager: SymbolManager? = null // Returns the Jawg url depending on the style given (jawg-streets by default) // See /res/values/strings which contains the url, the list of styles and your access token. private fun makeStyleUrl(style: String = \"jawg-streets\"): String { return \"${getString(R.string.jawg_styles_url) + style}.json?access-token=${getString(R.string.jawg_access_token)}\"; } override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) // Get the Mapbox context. Mapbox.getInstance(this) // Then set the activity layout setContentView(R.layout.activity_simple_map) // We get the map view to set its style with the desired Jawg url. mapView = findViewById(R.id.mapView) mapView?.onCreate(savedInstanceState) mapView?.getMapAsync { map -> map.setStyle(makeStyleUrl()) { style -> // Map fully loaded in this scope. // Update attributions position map.uiSettings.setAttributionMargins(15, 0, 0, 15) // Choose logo to display val selectedMarkerIconDrawable = ResourcesCompat.getDrawable(this.resources, R.drawable.ic_jawg_marker, null) style.addImage(MARKER_ICON, BitmapUtils.getBitmapFromDrawable(selectedMarkerIconDrawable)!!) this.symbolManager = SymbolManager(mapView!!, map, style) // Add symbol at specified lat/lon. val newSymbol = symbolManager?.create( SymbolOptions() .withLatLng(LatLng(-33.85416325, 151.20916)) .withIconImage(MARKER_ICON) .withIconSize(0.24f) ) symbolManager?.update(newSymbol) // Add a listener to trigger markers clicks. this.symbolManager?.addClickListener { // Display information Toast.makeText(this, \"Opera house\", Toast.LENGTH_LONG).show(); true } } } } override fun onStart() { super.onStart() mapView?.onStart() } override fun onResume() { super.onResume() mapView?.onResume() } override fun onPause() { super.onPause() mapView?.onPause() } override fun onStop() { super.onStop() mapView?.onStop() } override fun onLowMemory() { super.onLowMemory() mapView?.onLowMemory() } override fun onDestroy() { super.onDestroy() mapView?.onDestroy() } }","title":"Add a marker"},{"location":"Maplibre-android/Add-a-marker/#add-a-marker","text":"Estimated reading time : 1 minutes Check out this code sample that uses the MapLibre GL Android library to add a marker from GeoJSON onto your map. package io.jawg import android.os.Bundle import android.widget.Toast import androidx.appcompat.app.AppCompatActivity import androidx.core.content.res.ResourcesCompat import com.mapbox.mapboxsdk.Mapbox import com.mapbox.mapboxsdk.geometry.LatLng import com.mapbox.mapboxsdk.maps.MapView import com.mapbox.mapboxsdk.plugins.annotation.SymbolManager import com.mapbox.mapboxsdk.plugins.annotation.SymbolOptions import com.mapbox.mapboxsdk.utils.BitmapUtils class MarkerMapActivity : AppCompatActivity() { companion object { private const val MARKER_ICON = \"MARKER_ICON\" } private var mapView: MapView? = null private var symbolManager: SymbolManager? = null // Returns the Jawg url depending on the style given (jawg-streets by default) // See /res/values/strings which contains the url, the list of styles and your access token. private fun makeStyleUrl(style: String = \"jawg-streets\"): String { return \"${getString(R.string.jawg_styles_url) + style}.json?access-token=${getString(R.string.jawg_access_token)}\"; } override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) // Get the Mapbox context. Mapbox.getInstance(this) // Then set the activity layout setContentView(R.layout.activity_simple_map) // We get the map view to set its style with the desired Jawg url. mapView = findViewById(R.id.mapView) mapView?.onCreate(savedInstanceState) mapView?.getMapAsync { map -> map.setStyle(makeStyleUrl()) { style -> // Map fully loaded in this scope. // Update attributions position map.uiSettings.setAttributionMargins(15, 0, 0, 15) // Choose logo to display val selectedMarkerIconDrawable = ResourcesCompat.getDrawable(this.resources, R.drawable.ic_jawg_marker, null) style.addImage(MARKER_ICON, BitmapUtils.getBitmapFromDrawable(selectedMarkerIconDrawable)!!) this.symbolManager = SymbolManager(mapView!!, map, style) // Add symbol at specified lat/lon. val newSymbol = symbolManager?.create( SymbolOptions() .withLatLng(LatLng(-33.85416325, 151.20916)) .withIconImage(MARKER_ICON) .withIconSize(0.24f) ) symbolManager?.update(newSymbol) // Add a listener to trigger markers clicks. this.symbolManager?.addClickListener { // Display information Toast.makeText(this, \"Opera house\", Toast.LENGTH_LONG).show(); true } } } } override fun onStart() { super.onStart() mapView?.onStart() } override fun onResume() { super.onResume() mapView?.onResume() } override fun onPause() { super.onPause() mapView?.onPause() } override fun onStop() { super.onStop() mapView?.onStop() } override fun onLowMemory() { super.onLowMemory() mapView?.onLowMemory() } override fun onDestroy() { super.onDestroy() mapView?.onDestroy() } }","title":"Add a marker"},{"location":"Maplibre-android/Change-language/","text":"Change the language of your map Estimated reading time : 1 minutes Check out this code sample that uses the MapLibre GL Android library to change the language on your map. package io.jawg import android.os.Bundle import android.view.View import android.widget.AdapterView import android.widget.ArrayAdapter import android.widget.Spinner import androidx.appcompat.app.AppCompatActivity import com.mapbox.mapboxsdk.Mapbox import com.mapbox.mapboxsdk.maps.MapView import kotlinx.android.synthetic.main.activity_switch_languages.* class SwitchLanguagesActivity : AppCompatActivity(), AdapterView.OnItemSelectedListener { private var mapView: MapView? = null // Returns the Jawg url depending on the style given. // See /res/values/strings which contains the url, the list of styles and your access token. private fun makeStyleUrl(lang: String = \"en\", style: String = \"jawg-streets\"): String { return \"${getString(R.string.jawg_styles_url) + style}.json?lang=${lang}&access-token=${getString(R.string.jawg_access_token)}\"; } override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) // Get the Mapbox context. Mapbox.getInstance(this) // Then set the activity layout setContentView(R.layout.activity_switch_languages) // Here we fill the spinner with the different languages handled by Jawg. val spinner: Spinner = language_spinner ArrayAdapter.createFromResource(this, R.array.jawg_languages, android.R.layout.simple_spinner_item) .also { adapter -> adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item) spinner.adapter = adapter } // The spinner will follow the onItemSelected behavior overrode here. spinner.onItemSelectedListener = this // We get the map view to set its style with the desired Jawg url. mapView = findViewById(R.id.mapView) mapView?.onCreate(savedInstanceState) mapView?.getMapAsync { map -> map.setStyle(makeStyleUrl()) { // Map fully loaded in this scope. } } } // Behavior on item selection in the spinner. override fun onItemSelected(parent: AdapterView<*>, view: View, pos: Int, id: Long) { mapView?.getMapAsync { map -> // Update attributions position map.uiSettings.setAttributionMargins(15, 0, 0, 15) // We udate the map style using the value selected from the spinner. map.setStyle(makeStyleUrl(parent.getItemAtPosition(pos).toString())) } } override fun onNothingSelected(parent: AdapterView<*>) { // Do nothing. } override fun onStart() { super.onStart() mapView?.onStart() } override fun onResume() { super.onResume() mapView?.onResume() } override fun onPause() { super.onPause() mapView?.onPause() } override fun onStop() { super.onStop() mapView?.onStop() } override fun onLowMemory() { super.onLowMemory() mapView?.onLowMemory() } override fun onDestroy() { super.onDestroy() mapView?.onDestroy() } }","title":"Change language"},{"location":"Maplibre-android/Change-language/#change-the-language-of-your-map","text":"Estimated reading time : 1 minutes Check out this code sample that uses the MapLibre GL Android library to change the language on your map. package io.jawg import android.os.Bundle import android.view.View import android.widget.AdapterView import android.widget.ArrayAdapter import android.widget.Spinner import androidx.appcompat.app.AppCompatActivity import com.mapbox.mapboxsdk.Mapbox import com.mapbox.mapboxsdk.maps.MapView import kotlinx.android.synthetic.main.activity_switch_languages.* class SwitchLanguagesActivity : AppCompatActivity(), AdapterView.OnItemSelectedListener { private var mapView: MapView? = null // Returns the Jawg url depending on the style given. // See /res/values/strings which contains the url, the list of styles and your access token. private fun makeStyleUrl(lang: String = \"en\", style: String = \"jawg-streets\"): String { return \"${getString(R.string.jawg_styles_url) + style}.json?lang=${lang}&access-token=${getString(R.string.jawg_access_token)}\"; } override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) // Get the Mapbox context. Mapbox.getInstance(this) // Then set the activity layout setContentView(R.layout.activity_switch_languages) // Here we fill the spinner with the different languages handled by Jawg. val spinner: Spinner = language_spinner ArrayAdapter.createFromResource(this, R.array.jawg_languages, android.R.layout.simple_spinner_item) .also { adapter -> adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item) spinner.adapter = adapter } // The spinner will follow the onItemSelected behavior overrode here. spinner.onItemSelectedListener = this // We get the map view to set its style with the desired Jawg url. mapView = findViewById(R.id.mapView) mapView?.onCreate(savedInstanceState) mapView?.getMapAsync { map -> map.setStyle(makeStyleUrl()) { // Map fully loaded in this scope. } } } // Behavior on item selection in the spinner. override fun onItemSelected(parent: AdapterView<*>, view: View, pos: Int, id: Long) { mapView?.getMapAsync { map -> // Update attributions position map.uiSettings.setAttributionMargins(15, 0, 0, 15) // We udate the map style using the value selected from the spinner. map.setStyle(makeStyleUrl(parent.getItemAtPosition(pos).toString())) } } override fun onNothingSelected(parent: AdapterView<*>) { // Do nothing. } override fun onStart() { super.onStart() mapView?.onStart() } override fun onResume() { super.onResume() mapView?.onResume() } override fun onPause() { super.onPause() mapView?.onPause() } override fun onStop() { super.onStop() mapView?.onStop() } override fun onLowMemory() { super.onLowMemory() mapView?.onLowMemory() } override fun onDestroy() { super.onDestroy() mapView?.onDestroy() } }","title":"Change the language of your map"},{"location":"Maplibre-android/Change-style/","text":"Change the style of your map Estimated reading time : 1 minutes Switch between the default Jawg styles for your map using this code sample that uses the MapLibre GL Android library. package io.jawg import android.os.Bundle import android.view.View import android.widget.AdapterView import android.widget.ArrayAdapter import android.widget.Spinner import androidx.appcompat.app.AppCompatActivity import com.mapbox.mapboxsdk.Mapbox import com.mapbox.mapboxsdk.maps.MapView import kotlinx.android.synthetic.main.activity_different_styles.* class DifferentStylesActivity : AppCompatActivity(), AdapterView.OnItemSelectedListener { private var mapView: MapView? = null // Returns the Jawg url depending on the style given. // See /res/values/strings which contains the url, the list of styles and your access token. private fun makeStyleUrl(style: String = \"jawg-streets\"): String { return \"${getString(R.string.jawg_styles_url) + style}.json?access-token=${getString(R.string.jawg_access_token)}\"; } override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) // Get the Mapbox context. Mapbox.getInstance(this) // Then set the activity layout setContentView(R.layout.activity_different_styles) // Here we fill the spinner with the different styles of Jawg. val spinner: Spinner = style_spinner ArrayAdapter.createFromResource(this, R.array.jawg_styles, android.R.layout.simple_spinner_item) .also { adapter -> adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item) spinner.adapter = adapter } // The spinner will follow the onItemSelected behavior overrode here. spinner.onItemSelectedListener = this // We get the map view to set its style with the desired Jawg url. mapView = findViewById(R.id.mapView) mapView?.onCreate(savedInstanceState) mapView?.getMapAsync { map -> map.setStyle(makeStyleUrl()) { // Map fully loaded in this scope. } } } // Behavior on item selection in the spinner. override fun onItemSelected(parent: AdapterView<*>, view: View, pos: Int, id: Long) { mapView?.getMapAsync { map -> // We udate the map style using the value selected from the spinner. map.setStyle(makeStyleUrl(parent.getItemAtPosition(pos).toString())) { // Map fully loaded in this scope. // Update attributions position map.uiSettings.setAttributionMargins(15, 0, 0, 15) } } } override fun onNothingSelected(parent: AdapterView<*>) { // Do nothing. } override fun onStart() { super.onStart() mapView?.onStart() } override fun onResume() { super.onResume() mapView?.onResume() } override fun onPause() { super.onPause() mapView?.onPause() } override fun onStop() { super.onStop() mapView?.onStop() } override fun onLowMemory() { super.onLowMemory() mapView?.onLowMemory() } override fun onDestroy() { super.onDestroy() mapView?.onDestroy() } }","title":"Change style"},{"location":"Maplibre-android/Change-style/#change-the-style-of-your-map","text":"Estimated reading time : 1 minutes Switch between the default Jawg styles for your map using this code sample that uses the MapLibre GL Android library. package io.jawg import android.os.Bundle import android.view.View import android.widget.AdapterView import android.widget.ArrayAdapter import android.widget.Spinner import androidx.appcompat.app.AppCompatActivity import com.mapbox.mapboxsdk.Mapbox import com.mapbox.mapboxsdk.maps.MapView import kotlinx.android.synthetic.main.activity_different_styles.* class DifferentStylesActivity : AppCompatActivity(), AdapterView.OnItemSelectedListener { private var mapView: MapView? = null // Returns the Jawg url depending on the style given. // See /res/values/strings which contains the url, the list of styles and your access token. private fun makeStyleUrl(style: String = \"jawg-streets\"): String { return \"${getString(R.string.jawg_styles_url) + style}.json?access-token=${getString(R.string.jawg_access_token)}\"; } override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) // Get the Mapbox context. Mapbox.getInstance(this) // Then set the activity layout setContentView(R.layout.activity_different_styles) // Here we fill the spinner with the different styles of Jawg. val spinner: Spinner = style_spinner ArrayAdapter.createFromResource(this, R.array.jawg_styles, android.R.layout.simple_spinner_item) .also { adapter -> adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item) spinner.adapter = adapter } // The spinner will follow the onItemSelected behavior overrode here. spinner.onItemSelectedListener = this // We get the map view to set its style with the desired Jawg url. mapView = findViewById(R.id.mapView) mapView?.onCreate(savedInstanceState) mapView?.getMapAsync { map -> map.setStyle(makeStyleUrl()) { // Map fully loaded in this scope. } } } // Behavior on item selection in the spinner. override fun onItemSelected(parent: AdapterView<*>, view: View, pos: Int, id: Long) { mapView?.getMapAsync { map -> // We udate the map style using the value selected from the spinner. map.setStyle(makeStyleUrl(parent.getItemAtPosition(pos).toString())) { // Map fully loaded in this scope. // Update attributions position map.uiSettings.setAttributionMargins(15, 0, 0, 15) } } } override fun onNothingSelected(parent: AdapterView<*>) { // Do nothing. } override fun onStart() { super.onStart() mapView?.onStart() } override fun onResume() { super.onResume() mapView?.onResume() } override fun onPause() { super.onPause() mapView?.onPause() } override fun onStop() { super.onStop() mapView?.onStop() } override fun onLowMemory() { super.onLowMemory() mapView?.onLowMemory() } override fun onDestroy() { super.onDestroy() mapView?.onDestroy() } }","title":"Change the style of your map"},{"location":"Maplibre-android/Display-a-popup/","text":"Display a popup Estimated reading time : 1 minutes Check out this code sample that uses the MapLibre GL Android library to add a popup over your map data points. package io.jawg import android.os.Build import android.os.Bundle import android.view.ViewGroup import android.widget.LinearLayout import androidx.annotation.RequiresApi import androidx.appcompat.app.AppCompatActivity import androidx.core.content.res.ResourcesCompat import com.google.gson.JsonParser import com.mapbox.mapboxsdk.Mapbox import com.mapbox.mapboxsdk.geometry.LatLng import com.mapbox.mapboxsdk.maps.MapView import com.mapbox.mapboxsdk.plugins.annotation.Symbol import com.mapbox.mapboxsdk.plugins.annotation.SymbolManager import com.mapbox.mapboxsdk.plugins.annotation.SymbolOptions import com.mapbox.mapboxsdk.utils.BitmapUtils import kotlinx.android.synthetic.main.activity_popup_map.* class PopupMapActivity : AppCompatActivity() { companion object { private const val MARKER_SELECTED_ICON = \"JAWG_ICON\" private const val MARKER_ICON = \"MARKER_ICON\" } private var mapView: MapView? = null private var symbolManager: SymbolManager? = null private var lastSymbol: Symbol? = null // Returns the Jawg url depending on the style given (jawg-streets by default) // See /res/values/strings which contains the url, the list of styles and your access token. private fun makeStyleUrl(style: String = \"jawg-streets\"): String { return \"${getString(R.string.jawg_styles_url) + style}.json?access-token=${getString(R.string.jawg_access_token)}\"; } @RequiresApi(Build.VERSION_CODES.LOLLIPOP) override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) // Get the Mapbox context. Mapbox.getInstance(this) // Then set the activity layout. setContentView(R.layout.activity_popup_map) // We get the map view to set its style with the desired Jawg url. mapView = findViewById(R.id.mapView) mapView?.onCreate(savedInstanceState) mapView?.getMapAsync { map -> map.setStyle(makeStyleUrl()) { style -> // Map fully loaded in this scope. // Update attributions position map.uiSettings.setAttributionMargins(15, 0, 0, 15) // Add an icons (\"classic\" and \"selected\") to the map style. val selectedMarkerIconDrawable = ResourcesCompat.getDrawable(this.resources, R.drawable.ic_marker_green, null) style.addImage(MARKER_ICON, BitmapUtils.getBitmapFromDrawable(selectedMarkerIconDrawable)!!) val markerIconDrawable = ResourcesCompat.getDrawable(this.resources, R.drawable.ic_jawg_marker, null) style.addImage(MARKER_SELECTED_ICON, BitmapUtils.getBitmapFromDrawable(markerIconDrawable)!!) // Initialize SymbolManager. this.symbolManager = SymbolManager(mapView!!, map, style) this.symbolManager?.iconAllowOverlap = true this.symbolManager?.iconIgnorePlacement = true // Insert markers with their associated data. insertIconOnMap( LatLng(51.50853, -0.076132), \"Tower of London\", R.drawable.img_tower_london, \"It is a historic castle on the north bank of the River Thames in central London.\" + \"It lies within the London Borough of Tower Hamlets, which is separated from the eastern edge of the square mile of the City of London by the open space known as Tower Hill.\" + \"It was founded towards the end of 1066 as part of the Norman Conquest of England.\" ) insertIconOnMap( LatLng(51.501476, -0.140634), \"Buckingham Palace\", R.drawable.img_buckingham_palace, \"Located in the City of Westminster, the palace is often at the centre of state occasions and royal hospitality.\" + \"The building at the core of today's palace was a large townhouse built for the Duke of Buckingham in 1703.\" + \"It was acquired by King George III in 1761 as a private residence for Queen Charlotte and became known as The Queen's House.\" ) insertIconOnMap( LatLng(51.503399, -0.119519), \"London Eye\", R.drawable.img_london_eye, \"The London Eye, or the Millennium Wheel, is a cantilevered observation wheel on the South Bank of the River Thames in London.\" + \"It is Europe's tallest cantilevered observation wheel, and is the most popular paid tourist attraction in the United Kingdom with over 3 million visitors annually, and has made many appearances in popular culture.\" ) // Add a listener to trigger markers clicks. this.symbolManager?.addClickListener { // Put all marker information into the layout. titleView.text = it.data?.asJsonObject?.get(\"title\")?.asString descriptionView.text = it.data?.asJsonObject?.get(\"description\")?.asString descriptionLayout.background = getDrawable(it.data?.asJsonObject?.get(\"imageId\")?.asInt!!) descriptionLayout.background.alpha = 30 // Set the new marker as selected and toggle layout. setSelectedIcon(it) toggleLayout() true } } } } // Toggle the bottom layout to display information. private fun toggleLayout() { mapLayout?.layoutParams = LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 0, 2f) descriptionLayout?.layoutParams = LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 0, 1f) } private fun setDefaultIcon(symbol: Symbol) { symbol.iconImage = MARKER_ICON symbol.iconSize = 0.24f symbolManager?.update(symbol) } private fun setSelectedIcon(symbol: Symbol) { symbol.iconImage = MARKER_SELECTED_ICON symbol.iconSize = 0.25f symbolManager?.update(symbol) if (this.lastSymbol != null) { setDefaultIcon(this.lastSymbol!!) } this.lastSymbol = symbol } private fun insertIconOnMap(point: LatLng, title: String, imageId: Int, description: String) { // Convert datas of the marker into Json object. val jsonData = \"\"\" { \"title\" : \"$title\", \"imageId\" : \"$imageId\", \"description\" : \"$description\" } \"\"\" // Add symbol at specified lat/lon. val newSymbol = symbolManager!!.create( SymbolOptions() .withLatLng(LatLng(point.latitude, point.longitude)) .withData(JsonParser.parseString(jsonData)) ) setDefaultIcon(newSymbol) } override fun onStart() { super.onStart() mapView?.onStart() } override fun onResume() { super.onResume() mapView?.onResume() } override fun onPause() { super.onPause() mapView?.onPause() } override fun onStop() { super.onStop() mapView?.onStop() } override fun onLowMemory() { super.onLowMemory() mapView?.onLowMemory() } override fun onDestroy() { super.onDestroy() mapView?.onDestroy() } }","title":"Display a popup"},{"location":"Maplibre-android/Display-a-popup/#display-a-popup","text":"Estimated reading time : 1 minutes Check out this code sample that uses the MapLibre GL Android library to add a popup over your map data points. package io.jawg import android.os.Build import android.os.Bundle import android.view.ViewGroup import android.widget.LinearLayout import androidx.annotation.RequiresApi import androidx.appcompat.app.AppCompatActivity import androidx.core.content.res.ResourcesCompat import com.google.gson.JsonParser import com.mapbox.mapboxsdk.Mapbox import com.mapbox.mapboxsdk.geometry.LatLng import com.mapbox.mapboxsdk.maps.MapView import com.mapbox.mapboxsdk.plugins.annotation.Symbol import com.mapbox.mapboxsdk.plugins.annotation.SymbolManager import com.mapbox.mapboxsdk.plugins.annotation.SymbolOptions import com.mapbox.mapboxsdk.utils.BitmapUtils import kotlinx.android.synthetic.main.activity_popup_map.* class PopupMapActivity : AppCompatActivity() { companion object { private const val MARKER_SELECTED_ICON = \"JAWG_ICON\" private const val MARKER_ICON = \"MARKER_ICON\" } private var mapView: MapView? = null private var symbolManager: SymbolManager? = null private var lastSymbol: Symbol? = null // Returns the Jawg url depending on the style given (jawg-streets by default) // See /res/values/strings which contains the url, the list of styles and your access token. private fun makeStyleUrl(style: String = \"jawg-streets\"): String { return \"${getString(R.string.jawg_styles_url) + style}.json?access-token=${getString(R.string.jawg_access_token)}\"; } @RequiresApi(Build.VERSION_CODES.LOLLIPOP) override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) // Get the Mapbox context. Mapbox.getInstance(this) // Then set the activity layout. setContentView(R.layout.activity_popup_map) // We get the map view to set its style with the desired Jawg url. mapView = findViewById(R.id.mapView) mapView?.onCreate(savedInstanceState) mapView?.getMapAsync { map -> map.setStyle(makeStyleUrl()) { style -> // Map fully loaded in this scope. // Update attributions position map.uiSettings.setAttributionMargins(15, 0, 0, 15) // Add an icons (\"classic\" and \"selected\") to the map style. val selectedMarkerIconDrawable = ResourcesCompat.getDrawable(this.resources, R.drawable.ic_marker_green, null) style.addImage(MARKER_ICON, BitmapUtils.getBitmapFromDrawable(selectedMarkerIconDrawable)!!) val markerIconDrawable = ResourcesCompat.getDrawable(this.resources, R.drawable.ic_jawg_marker, null) style.addImage(MARKER_SELECTED_ICON, BitmapUtils.getBitmapFromDrawable(markerIconDrawable)!!) // Initialize SymbolManager. this.symbolManager = SymbolManager(mapView!!, map, style) this.symbolManager?.iconAllowOverlap = true this.symbolManager?.iconIgnorePlacement = true // Insert markers with their associated data. insertIconOnMap( LatLng(51.50853, -0.076132), \"Tower of London\", R.drawable.img_tower_london, \"It is a historic castle on the north bank of the River Thames in central London.\" + \"It lies within the London Borough of Tower Hamlets, which is separated from the eastern edge of the square mile of the City of London by the open space known as Tower Hill.\" + \"It was founded towards the end of 1066 as part of the Norman Conquest of England.\" ) insertIconOnMap( LatLng(51.501476, -0.140634), \"Buckingham Palace\", R.drawable.img_buckingham_palace, \"Located in the City of Westminster, the palace is often at the centre of state occasions and royal hospitality.\" + \"The building at the core of today's palace was a large townhouse built for the Duke of Buckingham in 1703.\" + \"It was acquired by King George III in 1761 as a private residence for Queen Charlotte and became known as The Queen's House.\" ) insertIconOnMap( LatLng(51.503399, -0.119519), \"London Eye\", R.drawable.img_london_eye, \"The London Eye, or the Millennium Wheel, is a cantilevered observation wheel on the South Bank of the River Thames in London.\" + \"It is Europe's tallest cantilevered observation wheel, and is the most popular paid tourist attraction in the United Kingdom with over 3 million visitors annually, and has made many appearances in popular culture.\" ) // Add a listener to trigger markers clicks. this.symbolManager?.addClickListener { // Put all marker information into the layout. titleView.text = it.data?.asJsonObject?.get(\"title\")?.asString descriptionView.text = it.data?.asJsonObject?.get(\"description\")?.asString descriptionLayout.background = getDrawable(it.data?.asJsonObject?.get(\"imageId\")?.asInt!!) descriptionLayout.background.alpha = 30 // Set the new marker as selected and toggle layout. setSelectedIcon(it) toggleLayout() true } } } } // Toggle the bottom layout to display information. private fun toggleLayout() { mapLayout?.layoutParams = LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 0, 2f) descriptionLayout?.layoutParams = LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 0, 1f) } private fun setDefaultIcon(symbol: Symbol) { symbol.iconImage = MARKER_ICON symbol.iconSize = 0.24f symbolManager?.update(symbol) } private fun setSelectedIcon(symbol: Symbol) { symbol.iconImage = MARKER_SELECTED_ICON symbol.iconSize = 0.25f symbolManager?.update(symbol) if (this.lastSymbol != null) { setDefaultIcon(this.lastSymbol!!) } this.lastSymbol = symbol } private fun insertIconOnMap(point: LatLng, title: String, imageId: Int, description: String) { // Convert datas of the marker into Json object. val jsonData = \"\"\" { \"title\" : \"$title\", \"imageId\" : \"$imageId\", \"description\" : \"$description\" } \"\"\" // Add symbol at specified lat/lon. val newSymbol = symbolManager!!.create( SymbolOptions() .withLatLng(LatLng(point.latitude, point.longitude)) .withData(JsonParser.parseString(jsonData)) ) setDefaultIcon(newSymbol) } override fun onStart() { super.onStart() mapView?.onStart() } override fun onResume() { super.onResume() mapView?.onResume() } override fun onPause() { super.onPause() mapView?.onPause() } override fun onStop() { super.onStop() mapView?.onStop() } override fun onLowMemory() { super.onLowMemory() mapView?.onLowMemory() } override fun onDestroy() { super.onDestroy() mapView?.onDestroy() } }","title":"Display a popup"},{"location":"Maplibre-android/Quickstart/","text":"MapLibre GL Android Estimated reading time : 2 minutes Prerequisite For all of our examples, you will need: An API key and MapSaudi account ( from the platform ), Basic knowledge in JavaScript and HTML, One style (default or custom style) check the full list of MapView attributes here Get the library There are several ways to get this library: from the github repository ( github.com/maplibre/maplibre-gl-native ) from maven/gradle (group: org.maplibre.gl, name: android-sdk, version: 9.5.1) Attribution Your map must display the following links: MapSaudi and \u00a9 OpenStreetMap . This is our attribution template: <a href=\"https://basemaps.mapsaudi.com/\" title=\"Tiles Courtesy of MapSaudi Maps\" target=\"_blank\" class=\"jawg-attrib\" >&copy; <b>MapSaudi</b>Maps</a> | <a href=\"https://www.openstreetmap.org/copyright\" title=\"OpenStreetMap is open data licensed under ODbL\" target=\"_blank\" class=\"osm-attrib\" >&copy; OSM contributors</a> Since we are not using mapbox, you should also hide the mapbox logo (mapbox:mapbox_uiLogo set to false). <com.mapbox.mapboxsdk.maps.MapView android:id=\"@+id/mapView\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" mapbox:mapbox_uiLogo=\"false\" mapbox:mapbox_uiAttribution=\"false\"/> Our examples simple-map : Simple map integration add-marker : Add a marker on your map add-geometry : Add a geometry from GeoJSON on your map add-your-data : Add your own data on your map add-popup : Add a popup on your map change-language : Change your map's language change-style : Change your map style (with our default styles) custom-style : Use a custom style from MapSaudi Lab","title":"Quickstart"},{"location":"Maplibre-android/Quickstart/#maplibre-gl-android","text":"Estimated reading time : 2 minutes","title":"MapLibre GL Android"},{"location":"Maplibre-android/Quickstart/#prerequisite","text":"For all of our examples, you will need: An API key and MapSaudi account ( from the platform ), Basic knowledge in JavaScript and HTML, One style (default or custom style) check the full list of MapView attributes here","title":"Prerequisite"},{"location":"Maplibre-android/Quickstart/#get-the-library","text":"There are several ways to get this library: from the github repository ( github.com/maplibre/maplibre-gl-native ) from maven/gradle (group: org.maplibre.gl, name: android-sdk, version: 9.5.1)","title":"Get the library"},{"location":"Maplibre-android/Quickstart/#attribution","text":"Your map must display the following links: MapSaudi and \u00a9 OpenStreetMap . This is our attribution template: <a href=\"https://basemaps.mapsaudi.com/\" title=\"Tiles Courtesy of MapSaudi Maps\" target=\"_blank\" class=\"jawg-attrib\" >&copy; <b>MapSaudi</b>Maps</a> | <a href=\"https://www.openstreetmap.org/copyright\" title=\"OpenStreetMap is open data licensed under ODbL\" target=\"_blank\" class=\"osm-attrib\" >&copy; OSM contributors</a> Since we are not using mapbox, you should also hide the mapbox logo (mapbox:mapbox_uiLogo set to false). <com.mapbox.mapboxsdk.maps.MapView android:id=\"@+id/mapView\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" mapbox:mapbox_uiLogo=\"false\" mapbox:mapbox_uiAttribution=\"false\"/>","title":"Attribution"},{"location":"Maplibre-android/Quickstart/#our-examples","text":"simple-map : Simple map integration add-marker : Add a marker on your map add-geometry : Add a geometry from GeoJSON on your map add-your-data : Add your own data on your map add-popup : Add a popup on your map change-language : Change your map's language change-style : Change your map style (with our default styles) custom-style : Use a custom style from MapSaudi Lab","title":"Our examples"},{"location":"Maplibre-android/Simple-map/","text":"Simple map integration on Android Estimated reading time : 1 minutes Check out this code sample that uses the MapLibre GL Android library to integrate a simple map onto your app. package io.jawg import android.os.Bundle import androidx.appcompat.app.AppCompatActivity import com.mapbox.mapboxsdk.Mapbox import com.mapbox.mapboxsdk.maps.MapView class SimpleMapActivity : AppCompatActivity() { private var mapView: MapView? = null // Returns the Jawg url depending on the style given (jawg-streets by default) // See /res/values/strings which contains the url, the list of styles and your access token. private fun makeStyleUrl(style: String = \"jawg-streets\"): String { return \"${getString(R.string.jawg_styles_url) + style}.json?access-token=${getString(R.string.jawg_access_token)}\"; } override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) // Get the Mapbox context. Mapbox.getInstance(this) // Then set the activity layout setContentView(R.layout.activity_simple_map) // We get the map view to set its style with the desired Jawg url. mapView = findViewById(R.id.mapView) mapView?.onCreate(savedInstanceState) mapView?.getMapAsync { map -> map.setStyle(makeStyleUrl()) { // Map fully loaded in this scope. // Update attributions position map.uiSettings.setAttributionMargins(15, 0, 0, 15) } } } override fun onStart() { super.onStart() mapView?.onStart() } override fun onResume() { super.onResume() mapView?.onResume() } override fun onPause() { super.onPause() mapView?.onPause() } override fun onStop() { super.onStop() mapView?.onStop() } override fun onLowMemory() { super.onLowMemory() mapView?.onLowMemory() } override fun onDestroy() { super.onDestroy() mapView?.onDestroy() } }","title":"Simple map"},{"location":"Maplibre-android/Simple-map/#simple-map-integration-on-android","text":"Estimated reading time : 1 minutes Check out this code sample that uses the MapLibre GL Android library to integrate a simple map onto your app. package io.jawg import android.os.Bundle import androidx.appcompat.app.AppCompatActivity import com.mapbox.mapboxsdk.Mapbox import com.mapbox.mapboxsdk.maps.MapView class SimpleMapActivity : AppCompatActivity() { private var mapView: MapView? = null // Returns the Jawg url depending on the style given (jawg-streets by default) // See /res/values/strings which contains the url, the list of styles and your access token. private fun makeStyleUrl(style: String = \"jawg-streets\"): String { return \"${getString(R.string.jawg_styles_url) + style}.json?access-token=${getString(R.string.jawg_access_token)}\"; } override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) // Get the Mapbox context. Mapbox.getInstance(this) // Then set the activity layout setContentView(R.layout.activity_simple_map) // We get the map view to set its style with the desired Jawg url. mapView = findViewById(R.id.mapView) mapView?.onCreate(savedInstanceState) mapView?.getMapAsync { map -> map.setStyle(makeStyleUrl()) { // Map fully loaded in this scope. // Update attributions position map.uiSettings.setAttributionMargins(15, 0, 0, 15) } } } override fun onStart() { super.onStart() mapView?.onStart() } override fun onResume() { super.onResume() mapView?.onResume() } override fun onPause() { super.onPause() mapView?.onPause() } override fun onStop() { super.onStop() mapView?.onStop() } override fun onLowMemory() { super.onLowMemory() mapView?.onLowMemory() } override fun onDestroy() { super.onDestroy() mapView?.onDestroy() } }","title":"Simple map integration on Android"},{"location":"Maplibre-android/Use-a-custom-style/","text":"Use a custom style from MapSaudi Lab Estimated reading time : 1 minutes Check out this code sample that allows you to add a custom style to your map, using the MapLibre GL Android library. package io.jawg import android.os.Bundle import android.view.inputmethod.EditorInfo import android.widget.EditText import android.widget.Toast import androidx.appcompat.app.AppCompatActivity import com.mapbox.mapboxsdk.Mapbox import com.mapbox.mapboxsdk.maps.MapView import kotlinx.android.synthetic.main.activity_custom_styles.* class CustomStyleActivity : AppCompatActivity() { private var mapView: MapView? = null /* * Enter you style ID from the lab here. * Our default styles are located here: https://jawg.io/docs/maps#get-custom-style-id * If you want your own style go to the lab: https://jawg.io/lab/styles. */ private var styleId: String = \"YOUR_CUSTOM_STYLE_ID\" // Returns the Jawg url depending on the style given // See /res/values/strings which contains the url and your access token. private fun makeStyleUrl(style: String = styleId): String { if (style == \"\") { Toast.makeText( applicationContext, \"You need to set a style id in CustomStyleActivity to make this view work.\", Toast.LENGTH_LONG ).show(); } return \"${getString(R.string.jawg_styles_url) + style}.json?access-token=${getString(R.string.jawg_access_token)}\"; } override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) // Get the Mapbox context. Mapbox.getInstance(this) // Then set the activity layout setContentView(R.layout.activity_custom_styles) val input: EditText = edit_text input.setOnEditorActionListener { v, actionId, _ -> if (actionId == EditorInfo.IME_ACTION_DONE) { switchStyle(v.text.toString()); true } else { false } } mapView = findViewById(R.id.mapView) mapView?.onCreate(savedInstanceState) mapView?.getMapAsync { map -> map.setStyle(makeStyleUrl()) { // Map fully loaded in this scope. // Update attributions position map.uiSettings.setAttributionMargins(15, 0, 0, 15) } } } private fun switchStyle(styleId: String) { mapView?.getMapAsync { map -> map.setStyle(makeStyleUrl(styleId)) { // Map fully loaded in this scope. } } } override fun onStart() { super.onStart() mapView?.onStart() } override fun onResume() { super.onResume() mapView?.onResume() } override fun onPause() { super.onPause() mapView?.onPause() } override fun onStop() { super.onStop() mapView?.onStop() } override fun onLowMemory() { super.onLowMemory() mapView?.onLowMemory() } override fun onDestroy() { super.onDestroy() mapView?.onDestroy() } }","title":"Use a custom style"},{"location":"Maplibre-android/Use-a-custom-style/#use-a-custom-style-from-mapsaudi-lab","text":"Estimated reading time : 1 minutes Check out this code sample that allows you to add a custom style to your map, using the MapLibre GL Android library. package io.jawg import android.os.Bundle import android.view.inputmethod.EditorInfo import android.widget.EditText import android.widget.Toast import androidx.appcompat.app.AppCompatActivity import com.mapbox.mapboxsdk.Mapbox import com.mapbox.mapboxsdk.maps.MapView import kotlinx.android.synthetic.main.activity_custom_styles.* class CustomStyleActivity : AppCompatActivity() { private var mapView: MapView? = null /* * Enter you style ID from the lab here. * Our default styles are located here: https://jawg.io/docs/maps#get-custom-style-id * If you want your own style go to the lab: https://jawg.io/lab/styles. */ private var styleId: String = \"YOUR_CUSTOM_STYLE_ID\" // Returns the Jawg url depending on the style given // See /res/values/strings which contains the url and your access token. private fun makeStyleUrl(style: String = styleId): String { if (style == \"\") { Toast.makeText( applicationContext, \"You need to set a style id in CustomStyleActivity to make this view work.\", Toast.LENGTH_LONG ).show(); } return \"${getString(R.string.jawg_styles_url) + style}.json?access-token=${getString(R.string.jawg_access_token)}\"; } override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) // Get the Mapbox context. Mapbox.getInstance(this) // Then set the activity layout setContentView(R.layout.activity_custom_styles) val input: EditText = edit_text input.setOnEditorActionListener { v, actionId, _ -> if (actionId == EditorInfo.IME_ACTION_DONE) { switchStyle(v.text.toString()); true } else { false } } mapView = findViewById(R.id.mapView) mapView?.onCreate(savedInstanceState) mapView?.getMapAsync { map -> map.setStyle(makeStyleUrl()) { // Map fully loaded in this scope. // Update attributions position map.uiSettings.setAttributionMargins(15, 0, 0, 15) } } } private fun switchStyle(styleId: String) { mapView?.getMapAsync { map -> map.setStyle(makeStyleUrl(styleId)) { // Map fully loaded in this scope. } } } override fun onStart() { super.onStart() mapView?.onStart() } override fun onResume() { super.onResume() mapView?.onResume() } override fun onPause() { super.onPause() mapView?.onPause() } override fun onStop() { super.onStop() mapView?.onStop() } override fun onLowMemory() { super.onLowMemory() mapView?.onLowMemory() } override fun onDestroy() { super.onDestroy() mapView?.onDestroy() } }","title":"Use a custom style from MapSaudi Lab"},{"location":"Maplibre-android/add-your-date/","text":"Add your data Estimated reading time : 1 minutes Use the code sample below to add your data on your map. This example is perfect to build a simple store locator! package io.jawg import android.os.Bundle import androidx.appcompat.app.AppCompatActivity import androidx.core.content.res.ResourcesCompat import com.mapbox.mapboxsdk.Mapbox import com.mapbox.mapboxsdk.maps.MapView import com.mapbox.mapboxsdk.style.layers.Property import com.mapbox.mapboxsdk.style.layers.PropertyFactory import com.mapbox.mapboxsdk.style.layers.SymbolLayer import com.mapbox.mapboxsdk.style.sources.GeoJsonSource import com.mapbox.mapboxsdk.utils.BitmapUtils import java.net.URI class DataMapActivity : AppCompatActivity() { companion object { private const val MARKER_ICON = \"MARKER_ICON\" } private var mapView: MapView? = null // Returns the Jawg url depending on the style given (jawg-streets by default) // See /res/values/strings which contains the url, the list of styles and your access token. private fun makeStyleUrl(style: String = \"jawg-streets\"): String { return \"${getString(R.string.jawg_styles_url) + style}.json?access-token=${getString(R.string.jawg_access_token)}\" } override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) // Get the Mapbox context. Mapbox.getInstance(this) // Then set the activity layout setContentView(R.layout.activity_data_map) // We get the map view to set its style with the desired Jawg url. mapView = findViewById(R.id.mapView) mapView?.onCreate(savedInstanceState) mapView?.getMapAsync { map -> map.setStyle(makeStyleUrl()) { // Map fully loaded in this scope. // Update attributions position map.uiSettings.setAttributionMargins(15, 0, 0, 15) // Add an image to use as a custom marker val selectedMarkerIconDrawable = ResourcesCompat.getDrawable(this.resources, R.drawable.ic_jawg_marker, null) it.addImage( MARKER_ICON, BitmapUtils.getBitmapFromDrawable(selectedMarkerIconDrawable)!! ) // Create a GeoJson Source from our remote geojson. val geoJsonUrl = \"https://media.jawg.io/add-your-data/marketplaces.geojson\" val geoJsonSource = GeoJsonSource(\"geojson-paris-markets\", URI(geoJsonUrl)) // Add it to the map it.addSource(geoJsonSource) // Create a layer with the desired style for our source. val layer = SymbolLayer(\"paris-market-pois\", \"geojson-paris-markets\") .withProperties( PropertyFactory.iconImage(MARKER_ICON), PropertyFactory.iconSize(0.2f), PropertyFactory.iconAnchor(Property.ICON_ANCHOR_BOTTOM) ) // Add the layer to the map it.addLayer(layer) } } } override fun onStart() { super.onStart() mapView?.onStart() } override fun onResume() { super.onResume() mapView?.onResume() } override fun onPause() { super.onPause() mapView?.onPause() } override fun onStop() { super.onStop() mapView?.onStop() } override fun onLowMemory() { super.onLowMemory() mapView?.onLowMemory() } override fun onDestroy() { super.onDestroy() mapView?.onDestroy() } }","title":"Add your data"},{"location":"Maplibre-android/add-your-date/#add-your-data","text":"Estimated reading time : 1 minutes Use the code sample below to add your data on your map. This example is perfect to build a simple store locator! package io.jawg import android.os.Bundle import androidx.appcompat.app.AppCompatActivity import androidx.core.content.res.ResourcesCompat import com.mapbox.mapboxsdk.Mapbox import com.mapbox.mapboxsdk.maps.MapView import com.mapbox.mapboxsdk.style.layers.Property import com.mapbox.mapboxsdk.style.layers.PropertyFactory import com.mapbox.mapboxsdk.style.layers.SymbolLayer import com.mapbox.mapboxsdk.style.sources.GeoJsonSource import com.mapbox.mapboxsdk.utils.BitmapUtils import java.net.URI class DataMapActivity : AppCompatActivity() { companion object { private const val MARKER_ICON = \"MARKER_ICON\" } private var mapView: MapView? = null // Returns the Jawg url depending on the style given (jawg-streets by default) // See /res/values/strings which contains the url, the list of styles and your access token. private fun makeStyleUrl(style: String = \"jawg-streets\"): String { return \"${getString(R.string.jawg_styles_url) + style}.json?access-token=${getString(R.string.jawg_access_token)}\" } override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) // Get the Mapbox context. Mapbox.getInstance(this) // Then set the activity layout setContentView(R.layout.activity_data_map) // We get the map view to set its style with the desired Jawg url. mapView = findViewById(R.id.mapView) mapView?.onCreate(savedInstanceState) mapView?.getMapAsync { map -> map.setStyle(makeStyleUrl()) { // Map fully loaded in this scope. // Update attributions position map.uiSettings.setAttributionMargins(15, 0, 0, 15) // Add an image to use as a custom marker val selectedMarkerIconDrawable = ResourcesCompat.getDrawable(this.resources, R.drawable.ic_jawg_marker, null) it.addImage( MARKER_ICON, BitmapUtils.getBitmapFromDrawable(selectedMarkerIconDrawable)!! ) // Create a GeoJson Source from our remote geojson. val geoJsonUrl = \"https://media.jawg.io/add-your-data/marketplaces.geojson\" val geoJsonSource = GeoJsonSource(\"geojson-paris-markets\", URI(geoJsonUrl)) // Add it to the map it.addSource(geoJsonSource) // Create a layer with the desired style for our source. val layer = SymbolLayer(\"paris-market-pois\", \"geojson-paris-markets\") .withProperties( PropertyFactory.iconImage(MARKER_ICON), PropertyFactory.iconSize(0.2f), PropertyFactory.iconAnchor(Property.ICON_ANCHOR_BOTTOM) ) // Add the layer to the map it.addLayer(layer) } } } override fun onStart() { super.onStart() mapView?.onStart() } override fun onResume() { super.onResume() mapView?.onResume() } override fun onPause() { super.onPause() mapView?.onPause() } override fun onStop() { super.onStop() mapView?.onStop() } override fun onLowMemory() { super.onLowMemory() mapView?.onLowMemory() } override fun onDestroy() { super.onDestroy() mapView?.onDestroy() } }","title":"Add your data"},{"location":"ReactNative/Add-Geometry/","text":"Add geometry Estimated reading time : 1 minutes Check out this code sample that uses the React Native library to add a geometry from GeoJSON onto your map. import React from 'react'; import {StyleSheet, View} from 'react-native'; import MapLibreGL from '@react-native-mapbox-gl/maps'; import {accessToken} from '../../config'; const styles = StyleSheet.create({ page: { flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#F5FCFF', }, container: { width: '100%', height: '100%', backgroundColor: 'white', }, map: { flex: 1, }, }); const AddGeometry = () => { return ( <View style={styles.page}> <View style={styles.container}> <MapLibreGL.MapView style={styles.map} logoEnabled={false} attributionEnabled={true} attributionPosition={{bottom: 8, left: 8}} styleURL={`https://api.jawg.io/styles/jawg-sunny.json?access-token=${accessToken}`}> <MapLibreGL.Camera defaultSettings={{ centerCoordinate: [2.3488, 48.8534], zoomLevel: 10, }} /> <MapLibreGL.ShapeSource id=\"route-source\" shape={geoJsonFeature}> <MapLibreGL.LineLayer id=\"route-layer\" style={{ lineColor: 'steelblue', lineWidth: 4, lineJoin: 'round', lineCap: 'round', }} /> </MapLibreGL.ShapeSource> </MapLibreGL.MapView> </View> </View> ); }; const geoJsonFeature = { type: 'Feature', properties: {}, geometry: { type: 'LineString', coordinates: [ [2.319887, 48.90046], [2.329981, 48.901163], [2.38515, 48.902008], [2.394906, 48.898444], [2.397627, 48.894578], [2.398846, 48.887109], [2.408308, 48.880409], [2.41327, 48.872892], [2.413838, 48.864376], [2.416341, 48.849234], [2.412246, 48.834539], [2.422139, 48.835798], [2.41939, 48.842577], [2.42813, 48.841528], [2.447699, 48.844818], [2.463438, 48.842089], [2.467426, 48.838891], [2.467582, 48.833133], [2.462696, 48.81906], [2.458705, 48.81714], [2.438448, 48.818232], [2.421462, 48.824054], [2.406032, 48.827615], [2.390939, 48.826079], [2.379296, 48.821214], [2.363947, 48.816314], [2.345958, 48.816036], [2.331898, 48.817011], [2.332461, 48.818247], [2.292196, 48.827142], [2.279052, 48.83249], [2.272793, 48.82792], [2.263174, 48.83398], [2.255144, 48.83481], [2.251709, 48.838822], [2.250612, 48.845555], [2.239978, 48.849702], [2.224219, 48.853517], [2.228225, 48.865183], [2.231736, 48.869069], [2.245678, 48.876435], [2.25541, 48.874264], [2.258467, 48.880387], [2.277487, 48.877968], [2.282327, 48.883923], [2.291507, 48.889472], [2.319887, 48.90046], ], }, }; export default AddGeometry;","title":"Add geometry"},{"location":"ReactNative/Add-Geometry/#add-geometry","text":"Estimated reading time : 1 minutes Check out this code sample that uses the React Native library to add a geometry from GeoJSON onto your map. import React from 'react'; import {StyleSheet, View} from 'react-native'; import MapLibreGL from '@react-native-mapbox-gl/maps'; import {accessToken} from '../../config'; const styles = StyleSheet.create({ page: { flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#F5FCFF', }, container: { width: '100%', height: '100%', backgroundColor: 'white', }, map: { flex: 1, }, }); const AddGeometry = () => { return ( <View style={styles.page}> <View style={styles.container}> <MapLibreGL.MapView style={styles.map} logoEnabled={false} attributionEnabled={true} attributionPosition={{bottom: 8, left: 8}} styleURL={`https://api.jawg.io/styles/jawg-sunny.json?access-token=${accessToken}`}> <MapLibreGL.Camera defaultSettings={{ centerCoordinate: [2.3488, 48.8534], zoomLevel: 10, }} /> <MapLibreGL.ShapeSource id=\"route-source\" shape={geoJsonFeature}> <MapLibreGL.LineLayer id=\"route-layer\" style={{ lineColor: 'steelblue', lineWidth: 4, lineJoin: 'round', lineCap: 'round', }} /> </MapLibreGL.ShapeSource> </MapLibreGL.MapView> </View> </View> ); }; const geoJsonFeature = { type: 'Feature', properties: {}, geometry: { type: 'LineString', coordinates: [ [2.319887, 48.90046], [2.329981, 48.901163], [2.38515, 48.902008], [2.394906, 48.898444], [2.397627, 48.894578], [2.398846, 48.887109], [2.408308, 48.880409], [2.41327, 48.872892], [2.413838, 48.864376], [2.416341, 48.849234], [2.412246, 48.834539], [2.422139, 48.835798], [2.41939, 48.842577], [2.42813, 48.841528], [2.447699, 48.844818], [2.463438, 48.842089], [2.467426, 48.838891], [2.467582, 48.833133], [2.462696, 48.81906], [2.458705, 48.81714], [2.438448, 48.818232], [2.421462, 48.824054], [2.406032, 48.827615], [2.390939, 48.826079], [2.379296, 48.821214], [2.363947, 48.816314], [2.345958, 48.816036], [2.331898, 48.817011], [2.332461, 48.818247], [2.292196, 48.827142], [2.279052, 48.83249], [2.272793, 48.82792], [2.263174, 48.83398], [2.255144, 48.83481], [2.251709, 48.838822], [2.250612, 48.845555], [2.239978, 48.849702], [2.224219, 48.853517], [2.228225, 48.865183], [2.231736, 48.869069], [2.245678, 48.876435], [2.25541, 48.874264], [2.258467, 48.880387], [2.277487, 48.877968], [2.282327, 48.883923], [2.291507, 48.889472], [2.319887, 48.90046], ], }, }; export default AddGeometry;","title":"Add geometry"},{"location":"ReactNative/Add-a-marker/","text":"Add a marker Estimated reading time : 1 minutes Check out this code sample that uses the React Native library to add a marker from GeoJSON or coordinates onto your map. import React from 'react'; import {StyleSheet, View, Image} from 'react-native'; import MapLibreGL from '@react-native-mapbox-gl/maps'; import {accessToken} from '../../config'; const styles = StyleSheet.create({ page: { flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#F5FCFF', }, container: { width: '100%', height: '100%', backgroundColor: 'white', }, map: { flex: 1, }, }); const AddMarker = () => { return ( <View style={styles.page}> <View style={styles.container}> <MapLibreGL.MapView style={styles.map} logoEnabled={false} attributionEnabled={true} attributionPosition={{bottom: 8, left: 8}} styleURL={`https://api.jawg.io/styles/jawg-sunny.json?access-token=${accessToken}`}> <MapLibreGL.Camera defaultSettings={{ centerCoordinate: [2.3210938, 48.8565913], zoomLevel: 5, }} /> <MapLibreGL.MarkerView coordinate={[-0.124589, 51.500741]} children={ <Image source={{ uri: 'https://www.r7.jawg.io/docs/images/icons/big-ben.png', }} style={{width: 25, height: 25}} /> } anchor={{x: 0, y: 0.5}} /> <MapLibreGL.ShapeSource id=\"marker-source\" shape={{ type: 'Feature', geometry: { type: 'Point', coordinates: [2.294694, 48.858093], }, }}> <MapLibreGL.SymbolLayer id=\"marker-layer\" style={{ iconImage: 'https://www.jawg.io/docs/images/icons/eiffel-tower.png', iconSize: 0.5, }} /> </MapLibreGL.ShapeSource> </MapLibreGL.MapView> </View> </View> ); }; export default AddMarker;","title":"Add a marker"},{"location":"ReactNative/Add-a-marker/#add-a-marker","text":"Estimated reading time : 1 minutes Check out this code sample that uses the React Native library to add a marker from GeoJSON or coordinates onto your map. import React from 'react'; import {StyleSheet, View, Image} from 'react-native'; import MapLibreGL from '@react-native-mapbox-gl/maps'; import {accessToken} from '../../config'; const styles = StyleSheet.create({ page: { flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#F5FCFF', }, container: { width: '100%', height: '100%', backgroundColor: 'white', }, map: { flex: 1, }, }); const AddMarker = () => { return ( <View style={styles.page}> <View style={styles.container}> <MapLibreGL.MapView style={styles.map} logoEnabled={false} attributionEnabled={true} attributionPosition={{bottom: 8, left: 8}} styleURL={`https://api.jawg.io/styles/jawg-sunny.json?access-token=${accessToken}`}> <MapLibreGL.Camera defaultSettings={{ centerCoordinate: [2.3210938, 48.8565913], zoomLevel: 5, }} /> <MapLibreGL.MarkerView coordinate={[-0.124589, 51.500741]} children={ <Image source={{ uri: 'https://www.r7.jawg.io/docs/images/icons/big-ben.png', }} style={{width: 25, height: 25}} /> } anchor={{x: 0, y: 0.5}} /> <MapLibreGL.ShapeSource id=\"marker-source\" shape={{ type: 'Feature', geometry: { type: 'Point', coordinates: [2.294694, 48.858093], }, }}> <MapLibreGL.SymbolLayer id=\"marker-layer\" style={{ iconImage: 'https://www.jawg.io/docs/images/icons/eiffel-tower.png', iconSize: 0.5, }} /> </MapLibreGL.ShapeSource> </MapLibreGL.MapView> </View> </View> ); }; export default AddMarker;","title":"Add a marker"},{"location":"ReactNative/Change-language/","text":"Change the language of your map Estimated reading time : 1 minutes Check out this code sample that uses the React Native library to change the language on your map. import React, {useState} from 'react'; import {StyleSheet, View} from 'react-native'; import MapLibreGL from '@react-native-mapbox-gl/maps'; import SelectDropdown from 'react-native-select-dropdown'; import {accessToken} from '../../config'; const styles = StyleSheet.create({ page: { flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#F5FCFF', }, container: { width: '100%', height: '100%', backgroundColor: 'white', }, map: { flex: 1, }, menu: { height: 40, width: '100%', }, }); const ChangeLanguage = () => { const languages = { English: 'en', French: 'fr', Italian: 'it', Spanish: 'es', German: 'de', Dutch: 'nl', Chinese: 'zh', }; const [language, setLanguage] = useState(languages.English); return ( <View style={styles.page}> <View style={styles.container}> <SelectDropdown buttonStyle={styles.menu} data={Object.keys(languages)} defaultValueByIndex={0} rowStyle={{ height: 40, }} onSelect={(selectedItem, _) => setLanguage(languages[selectedItem])} /> <MapLibreGL.MapView style={styles.map} logoEnabled={false} attributionEnabled={true} attributionPosition={{bottom: 8, left: 8}} styleURL={`https://api.jawg.io/styles/jawg-dark.json?lang=${language}&access-token=${accessToken}`}> <MapLibreGL.Camera defaultSettings={{ centerCoordinate: [2.3210938, 48.7965913], zoomLevel: 2, }} /> </MapLibreGL.MapView> </View> </View> ); }; export default ChangeLanguage;","title":"Change language"},{"location":"ReactNative/Change-language/#change-the-language-of-your-map","text":"Estimated reading time : 1 minutes Check out this code sample that uses the React Native library to change the language on your map. import React, {useState} from 'react'; import {StyleSheet, View} from 'react-native'; import MapLibreGL from '@react-native-mapbox-gl/maps'; import SelectDropdown from 'react-native-select-dropdown'; import {accessToken} from '../../config'; const styles = StyleSheet.create({ page: { flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#F5FCFF', }, container: { width: '100%', height: '100%', backgroundColor: 'white', }, map: { flex: 1, }, menu: { height: 40, width: '100%', }, }); const ChangeLanguage = () => { const languages = { English: 'en', French: 'fr', Italian: 'it', Spanish: 'es', German: 'de', Dutch: 'nl', Chinese: 'zh', }; const [language, setLanguage] = useState(languages.English); return ( <View style={styles.page}> <View style={styles.container}> <SelectDropdown buttonStyle={styles.menu} data={Object.keys(languages)} defaultValueByIndex={0} rowStyle={{ height: 40, }} onSelect={(selectedItem, _) => setLanguage(languages[selectedItem])} /> <MapLibreGL.MapView style={styles.map} logoEnabled={false} attributionEnabled={true} attributionPosition={{bottom: 8, left: 8}} styleURL={`https://api.jawg.io/styles/jawg-dark.json?lang=${language}&access-token=${accessToken}`}> <MapLibreGL.Camera defaultSettings={{ centerCoordinate: [2.3210938, 48.7965913], zoomLevel: 2, }} /> </MapLibreGL.MapView> </View> </View> ); }; export default ChangeLanguage;","title":"Change the language of your map"},{"location":"ReactNative/Change-style/","text":"Change the style of your map Estimated reading time : 1 minutes Switch between the default MapSaudi styles for your map using this code sample that uses the React Native library. import React, {useState} from 'react'; import {StyleSheet, View} from 'react-native'; import MapLibreGL from '@react-native-mapbox-gl/maps'; import SelectDropdown from 'react-native-select-dropdown'; import {accessToken} from '../../config'; const styles = StyleSheet.create({ page: { flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#F5FCFF', }, container: { width: '100%', height: '100%', backgroundColor: 'white', }, map: { flex: 1, }, menu: { height: 40, width: '100%', }, }); const ChangeStyle = () => { const jawgStyles = [ 'jawg-streets', 'jawg-sunny', 'jawg-terrain', 'jawg-dark', 'jawg-light', ]; const [style, setStyle] = useState(jawgStyles[0]); return ( <View style={styles.page}> <View style={styles.container}> <SelectDropdown buttonStyle={styles.menu} data={jawgStyles} defaultValueByIndex={0} rowStyle={{ height: 40, }} onSelect={(selectedItem, _) => setStyle(selectedItem)} /> <MapLibreGL.MapView style={styles.map} logoEnabled={false} attributionEnabled={true} attributionPosition={{bottom: 8, left: 8}} styleURL={`https://api.jawg.io/styles/${style}.json?lang=en&access-token=${accessToken}`}> <MapLibreGL.Camera defaultSettings={{ centerCoordinate: [35.51, 33.88], zoomLevel: 12, }} /> </MapLibreGL.MapView> </View> </View> ); }; export default ChangeStyle;","title":"Change style"},{"location":"ReactNative/Change-style/#change-the-style-of-your-map","text":"Estimated reading time : 1 minutes Switch between the default MapSaudi styles for your map using this code sample that uses the React Native library. import React, {useState} from 'react'; import {StyleSheet, View} from 'react-native'; import MapLibreGL from '@react-native-mapbox-gl/maps'; import SelectDropdown from 'react-native-select-dropdown'; import {accessToken} from '../../config'; const styles = StyleSheet.create({ page: { flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#F5FCFF', }, container: { width: '100%', height: '100%', backgroundColor: 'white', }, map: { flex: 1, }, menu: { height: 40, width: '100%', }, }); const ChangeStyle = () => { const jawgStyles = [ 'jawg-streets', 'jawg-sunny', 'jawg-terrain', 'jawg-dark', 'jawg-light', ]; const [style, setStyle] = useState(jawgStyles[0]); return ( <View style={styles.page}> <View style={styles.container}> <SelectDropdown buttonStyle={styles.menu} data={jawgStyles} defaultValueByIndex={0} rowStyle={{ height: 40, }} onSelect={(selectedItem, _) => setStyle(selectedItem)} /> <MapLibreGL.MapView style={styles.map} logoEnabled={false} attributionEnabled={true} attributionPosition={{bottom: 8, left: 8}} styleURL={`https://api.jawg.io/styles/${style}.json?lang=en&access-token=${accessToken}`}> <MapLibreGL.Camera defaultSettings={{ centerCoordinate: [35.51, 33.88], zoomLevel: 12, }} /> </MapLibreGL.MapView> </View> </View> ); }; export default ChangeStyle;","title":"Change the style of your map"},{"location":"ReactNative/Display-a-popup/","text":"Display a popup Estimated reading time : 1 minutes Check out this code sample that uses the React Native library to add a popup over your map data points. import React from 'react'; import {StyleSheet, View} from 'react-native'; import MapLibreGL from '@react-native-mapbox-gl/maps'; import {accessToken} from '../../config'; const styles = StyleSheet.create({ page: { flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#F5FCFF', }, container: { width: '100%', height: '100%', backgroundColor: 'white', }, map: { flex: 1, }, }); const AddPopup = () => { return ( <View style={styles.page}> <View style={styles.container}> <MapLibreGL.MapView style={styles.map} logoEnabled={false} attributionEnabled={true} attributionPosition={{bottom: 8, left: 8}} styleURL={`https://api.jawg.io/styles/jawg-sunny.json?access-token=${accessToken}`}> <MapLibreGL.Camera defaultSettings={{ centerCoordinate: [-61.572646, 16.233131], zoomLevel: 9, }} /> <MapLibreGL.MarkerView id=\"annotaton-simple\" coordinate={[-61.572646, 16.273131]}> <MapLibreGL.Callout title=\"Hello world!\" style={{color: 'black'}} /> </MapLibreGL.MarkerView> <MapLibreGL.PointAnnotation id=\"annotation-hidden\" coordinate={[-61.653889, 15.966636]} style={{backgroundColor: 'white'}}> <MapLibreGL.Callout title=\"A popup that is shown when you click on a marker\" style={{color: 'black'}} /> </MapLibreGL.PointAnnotation> </MapLibreGL.MapView> </View> </View> ); }; export default AddPopup;","title":"Display a popup"},{"location":"ReactNative/Display-a-popup/#display-a-popup","text":"Estimated reading time : 1 minutes Check out this code sample that uses the React Native library to add a popup over your map data points. import React from 'react'; import {StyleSheet, View} from 'react-native'; import MapLibreGL from '@react-native-mapbox-gl/maps'; import {accessToken} from '../../config'; const styles = StyleSheet.create({ page: { flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#F5FCFF', }, container: { width: '100%', height: '100%', backgroundColor: 'white', }, map: { flex: 1, }, }); const AddPopup = () => { return ( <View style={styles.page}> <View style={styles.container}> <MapLibreGL.MapView style={styles.map} logoEnabled={false} attributionEnabled={true} attributionPosition={{bottom: 8, left: 8}} styleURL={`https://api.jawg.io/styles/jawg-sunny.json?access-token=${accessToken}`}> <MapLibreGL.Camera defaultSettings={{ centerCoordinate: [-61.572646, 16.233131], zoomLevel: 9, }} /> <MapLibreGL.MarkerView id=\"annotaton-simple\" coordinate={[-61.572646, 16.273131]}> <MapLibreGL.Callout title=\"Hello world!\" style={{color: 'black'}} /> </MapLibreGL.MarkerView> <MapLibreGL.PointAnnotation id=\"annotation-hidden\" coordinate={[-61.653889, 15.966636]} style={{backgroundColor: 'white'}}> <MapLibreGL.Callout title=\"A popup that is shown when you click on a marker\" style={{color: 'black'}} /> </MapLibreGL.PointAnnotation> </MapLibreGL.MapView> </View> </View> ); }; export default AddPopup;","title":"Display a popup"},{"location":"ReactNative/Quickstart/","text":"React Native Estimated reading time : 3 minutes Prerequisite The support of react native is done by an unofficial open source react native bindings to maps SDKs based on OpenStreetMap. Their binding uses Mapbox as examples, you must change those URLs by MapSaudi Maps URLs. For all of our examples, you will need: An API key and MapSaudi account ( from the Platform ), Basic knowledge of React Native, One style (default or custom style) Get the library There are several ways to get this library: from the github repository ( github.com/react-native-mapbox-gl/maps ) from npmjs.com (package name: @react-native-mapbox-gl/maps ) You will need to add some changes in your Podfile and build.gradle to use MapLibre GL instead of Mapbox GL Podfile: $RNMBGL_Use_SPM = { url: \"https://github.com/maplibre/maplibre-gl-native-distribution\", requirement: { kind: \"upToNextMajorVersion\", minimumVersion: \"5.11.0\" }, product_name: \"Mapbox\" } # ... pre_install do |installer| $RNMBGL.pre_install(installer) end post_install do |installer| flipper_post_install(installer) $RNMBGL.post_install(installer) end buildscript { ext { // ... rnmbglMapboxLibs = { implementation (\"org.maplibre.gl:android-sdk:9.2.1\") implementation (\"com.mapbox.mapboxsdk:mapbox-sdk-turf:5.3.0\") } rnmbglMapboxPlugins = { implementation (\"com.mapbox.mapboxsdk:mapbox-android-gestures:0.7.0\") implementation (\"com.mapbox.mapboxsdk:mapbox-android-plugin-localization-v9:0.12.0\") { exclude group: 'com.mapbox.mapboxsdk', module: 'mapbox-android-sdk' } implementation (\"com.mapbox.mapboxsdk:mapbox-android-plugin-annotation-v9:0.8.0\") { exclude group: 'com.mapbox.mapboxsdk', module: 'mapbox-android-sdk' } implementation (\"com.mapbox.mapboxsdk:mapbox-android-plugin-markerview-v9:0.4.0\") { exclude group: 'com.mapbox.mapboxsdk', module: 'mapbox-android-sdk' } } } } repositories { // ... maven { url = \"https://dl.bintray.com/maplibre/maplibre-gl-native\" } } Attribution Your map must display the following links: MapSaudi and \u00a9 OpenStreetMap . This is our attribution template: <a href=\"https://basemaps.mapsaudi.com/\" title=\"Tiles Courtesy of MapSaudi Maps\" target=\"_blank\" class=\"jawg-attrib\" >&copy; <b>MapSaudi</b>Maps</a> | <a href=\"https://www.openstreetmap.org/copyright\" title=\"OpenStreetMap is open data licensed under ODbL\" target=\"_blank\" class=\"osm-attrib\" >&copy; OSM contributors</a> Since we are not using mapbox, you should also hide the mapbox logo (mapbox:mapbox_uiLogo set to false). Our examples simple-map : Simple map integration add-marker : Add a marker on your map add-geometry : Add a geometry from GeoJSON on your map add-your-data : Add your own data on your map add-popup : Add a popup on your map change-language : Change your map's language change-style : Change your map style (with our default styles) custom-style : Use a custom style from MapSaudi Lab","title":"Quickstart"},{"location":"ReactNative/Quickstart/#react-native","text":"Estimated reading time : 3 minutes","title":"React Native"},{"location":"ReactNative/Quickstart/#prerequisite","text":"The support of react native is done by an unofficial open source react native bindings to maps SDKs based on OpenStreetMap. Their binding uses Mapbox as examples, you must change those URLs by MapSaudi Maps URLs. For all of our examples, you will need: An API key and MapSaudi account ( from the Platform ), Basic knowledge of React Native, One style (default or custom style)","title":"Prerequisite"},{"location":"ReactNative/Quickstart/#get-the-library","text":"There are several ways to get this library: from the github repository ( github.com/react-native-mapbox-gl/maps ) from npmjs.com (package name: @react-native-mapbox-gl/maps ) You will need to add some changes in your Podfile and build.gradle to use MapLibre GL instead of Mapbox GL Podfile: $RNMBGL_Use_SPM = { url: \"https://github.com/maplibre/maplibre-gl-native-distribution\", requirement: { kind: \"upToNextMajorVersion\", minimumVersion: \"5.11.0\" }, product_name: \"Mapbox\" } # ... pre_install do |installer| $RNMBGL.pre_install(installer) end post_install do |installer| flipper_post_install(installer) $RNMBGL.post_install(installer) end buildscript { ext { // ... rnmbglMapboxLibs = { implementation (\"org.maplibre.gl:android-sdk:9.2.1\") implementation (\"com.mapbox.mapboxsdk:mapbox-sdk-turf:5.3.0\") } rnmbglMapboxPlugins = { implementation (\"com.mapbox.mapboxsdk:mapbox-android-gestures:0.7.0\") implementation (\"com.mapbox.mapboxsdk:mapbox-android-plugin-localization-v9:0.12.0\") { exclude group: 'com.mapbox.mapboxsdk', module: 'mapbox-android-sdk' } implementation (\"com.mapbox.mapboxsdk:mapbox-android-plugin-annotation-v9:0.8.0\") { exclude group: 'com.mapbox.mapboxsdk', module: 'mapbox-android-sdk' } implementation (\"com.mapbox.mapboxsdk:mapbox-android-plugin-markerview-v9:0.4.0\") { exclude group: 'com.mapbox.mapboxsdk', module: 'mapbox-android-sdk' } } } } repositories { // ... maven { url = \"https://dl.bintray.com/maplibre/maplibre-gl-native\" } }","title":"Get the library"},{"location":"ReactNative/Quickstart/#attribution","text":"Your map must display the following links: MapSaudi and \u00a9 OpenStreetMap . This is our attribution template: <a href=\"https://basemaps.mapsaudi.com/\" title=\"Tiles Courtesy of MapSaudi Maps\" target=\"_blank\" class=\"jawg-attrib\" >&copy; <b>MapSaudi</b>Maps</a> | <a href=\"https://www.openstreetmap.org/copyright\" title=\"OpenStreetMap is open data licensed under ODbL\" target=\"_blank\" class=\"osm-attrib\" >&copy; OSM contributors</a> Since we are not using mapbox, you should also hide the mapbox logo (mapbox:mapbox_uiLogo set to false).","title":"Attribution"},{"location":"ReactNative/Quickstart/#our-examples","text":"simple-map : Simple map integration add-marker : Add a marker on your map add-geometry : Add a geometry from GeoJSON on your map add-your-data : Add your own data on your map add-popup : Add a popup on your map change-language : Change your map's language change-style : Change your map style (with our default styles) custom-style : Use a custom style from MapSaudi Lab","title":"Our examples"},{"location":"ReactNative/Simple-map/","text":"Simple map integration Estimated reading time : 1 minutes Check out this code sample that uses the React Native library to integrate a simple map. import React from 'react'; import {StyleSheet, View} from 'react-native'; import MapLibreGL from '@react-native-mapbox-gl/maps'; import {accessToken} from '../../config'; const styles = StyleSheet.create({ page: { flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#F5FCFF', }, container: { width: '100%', height: '100%', backgroundColor: 'white', }, map: { flex: 1, }, }); const SimpleMap = () => { return ( <View style={styles.page}> <View style={styles.container}> <MapLibreGL.MapView style={styles.map} logoEnabled={false} attributionEnabled={true} attributionPosition={{bottom: 8, left: 8}} styleURL={`https://api.jawg.io/styles/jawg-sunny.json?access-token=${accessToken}`}> <MapLibreGL.Camera defaultSettings={{ centerCoordinate: [2.3210938, 48.7965913], zoomLevel: 2, }} /> </MapLibreGL.MapView> </View> </View> ); }; export default SimpleMap;","title":"Simple map"},{"location":"ReactNative/Simple-map/#simple-map-integration","text":"Estimated reading time : 1 minutes Check out this code sample that uses the React Native library to integrate a simple map. import React from 'react'; import {StyleSheet, View} from 'react-native'; import MapLibreGL from '@react-native-mapbox-gl/maps'; import {accessToken} from '../../config'; const styles = StyleSheet.create({ page: { flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#F5FCFF', }, container: { width: '100%', height: '100%', backgroundColor: 'white', }, map: { flex: 1, }, }); const SimpleMap = () => { return ( <View style={styles.page}> <View style={styles.container}> <MapLibreGL.MapView style={styles.map} logoEnabled={false} attributionEnabled={true} attributionPosition={{bottom: 8, left: 8}} styleURL={`https://api.jawg.io/styles/jawg-sunny.json?access-token=${accessToken}`}> <MapLibreGL.Camera defaultSettings={{ centerCoordinate: [2.3210938, 48.7965913], zoomLevel: 2, }} /> </MapLibreGL.MapView> </View> </View> ); }; export default SimpleMap;","title":"Simple map integration"},{"location":"ReactNative/Use-a-custom-style/","text":"Use a custom style from MapSaudi Lab Estimated reading time : 1 minutes Check out this code sample that allows you to add a custom style to your map, using the React Native library. import React, {useState} from 'react'; import {StyleSheet, View, TextInput, Button} from 'react-native'; import MapLibreGL from '@react-native-mapbox-gl/maps'; import {accessToken, customStyle} from '../../config'; const styles = StyleSheet.create({ page: { flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#F5FCFF', }, container: { width: '100%', height: '100%', backgroundColor: 'white', }, topBar: { height: 60, display: 'flex', flexDirection: 'row', padding: 10, }, tokenInput: { height: 40, flex: 2, borderWidth: 1, padding: 10, marginRight: 10, color: 'black', }, updateButton: { height: 40, padding: 10, }, map: { flex: 1, }, }); const CustomStyle = () => { const [style, setStyle] = useState(customStyle); const [input, updateInput] = useState(''); return ( <View style={styles.page}> <View style={styles.container}> <View style={styles.topBar}> <TextInput style={styles.tokenInput} onChangeText={newInput => updateInput(newInput.trim())} defaultValue={customStyle} placeholder={'enter your custom style name'} /> <Button style={styles.updateButton} title={'Update'} onPress={() => setStyle(input)} /> </View> <MapLibreGL.MapView style={styles.map} logoEnabled={false} attributionEnabled={true} attributionPosition={{bottom: 8, left: 8}} styleURL={`https://api.jawg.io/styles/${style}.json?access-token=${accessToken}`}> <MapLibreGL.Camera defaultSettings={{ centerCoordinate: [2.3210938, 48.7965913], zoomLevel: 2, }} /> </MapLibreGL.MapView> </View> </View> ); }; export default CustomStyle;","title":"Use a custom style"},{"location":"ReactNative/Use-a-custom-style/#use-a-custom-style-from-mapsaudi-lab","text":"Estimated reading time : 1 minutes Check out this code sample that allows you to add a custom style to your map, using the React Native library. import React, {useState} from 'react'; import {StyleSheet, View, TextInput, Button} from 'react-native'; import MapLibreGL from '@react-native-mapbox-gl/maps'; import {accessToken, customStyle} from '../../config'; const styles = StyleSheet.create({ page: { flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#F5FCFF', }, container: { width: '100%', height: '100%', backgroundColor: 'white', }, topBar: { height: 60, display: 'flex', flexDirection: 'row', padding: 10, }, tokenInput: { height: 40, flex: 2, borderWidth: 1, padding: 10, marginRight: 10, color: 'black', }, updateButton: { height: 40, padding: 10, }, map: { flex: 1, }, }); const CustomStyle = () => { const [style, setStyle] = useState(customStyle); const [input, updateInput] = useState(''); return ( <View style={styles.page}> <View style={styles.container}> <View style={styles.topBar}> <TextInput style={styles.tokenInput} onChangeText={newInput => updateInput(newInput.trim())} defaultValue={customStyle} placeholder={'enter your custom style name'} /> <Button style={styles.updateButton} title={'Update'} onPress={() => setStyle(input)} /> </View> <MapLibreGL.MapView style={styles.map} logoEnabled={false} attributionEnabled={true} attributionPosition={{bottom: 8, left: 8}} styleURL={`https://api.jawg.io/styles/${style}.json?access-token=${accessToken}`}> <MapLibreGL.Camera defaultSettings={{ centerCoordinate: [2.3210938, 48.7965913], zoomLevel: 2, }} /> </MapLibreGL.MapView> </View> </View> ); }; export default CustomStyle;","title":"Use a custom style from MapSaudi Lab"},{"location":"ReactNative/add-your-date/","text":"Add your data Estimated reading time : 1 minutes Use the code sample below to add your data on your map. This example is perfect to build a simple store locator! import React from 'react'; import {StyleSheet, View} from 'react-native'; import MapLibreGL from '@react-native-mapbox-gl/maps'; import {accessToken} from '../../config'; const styles = StyleSheet.create({ page: { flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#F5FCFF', }, container: { width: '100%', height: '100%', backgroundColor: 'white', }, map: { flex: 1, }, }); const AddData = () => { return ( <View style={styles.page}> <View style={styles.container}> <MapLibreGL.MapView style={styles.map} logoEnabled={false} attributionEnabled={true} attributionPosition={{bottom: 8, left: 8}} styleURL={`https://api.jawg.io/styles/jawg-sunny.json?access-token=${accessToken}`}> <MapLibreGL.Camera defaultSettings={{ centerCoordinate: [2.3488, 48.8534], zoomLevel: 10, }} /> <MapLibreGL.ShapeSource id=\"market-source\" url={'https://media.jawg.io/add-your-data/marketplaces.geojson'}> <MapLibreGL.SymbolLayer id=\"shop-icon\" style={{ iconImage: 'https://media.jawg.io/add-your-data/shop.png', iconAnchor: 'bottom', }} /> </MapLibreGL.ShapeSource> </MapLibreGL.MapView> </View> </View> ); }; export default AddData;","title":"Add your data"},{"location":"ReactNative/add-your-date/#add-your-data","text":"Estimated reading time : 1 minutes Use the code sample below to add your data on your map. This example is perfect to build a simple store locator! import React from 'react'; import {StyleSheet, View} from 'react-native'; import MapLibreGL from '@react-native-mapbox-gl/maps'; import {accessToken} from '../../config'; const styles = StyleSheet.create({ page: { flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#F5FCFF', }, container: { width: '100%', height: '100%', backgroundColor: 'white', }, map: { flex: 1, }, }); const AddData = () => { return ( <View style={styles.page}> <View style={styles.container}> <MapLibreGL.MapView style={styles.map} logoEnabled={false} attributionEnabled={true} attributionPosition={{bottom: 8, left: 8}} styleURL={`https://api.jawg.io/styles/jawg-sunny.json?access-token=${accessToken}`}> <MapLibreGL.Camera defaultSettings={{ centerCoordinate: [2.3488, 48.8534], zoomLevel: 10, }} /> <MapLibreGL.ShapeSource id=\"market-source\" url={'https://media.jawg.io/add-your-data/marketplaces.geojson'}> <MapLibreGL.SymbolLayer id=\"shop-icon\" style={{ iconImage: 'https://media.jawg.io/add-your-data/shop.png', iconAnchor: 'bottom', }} /> </MapLibreGL.ShapeSource> </MapLibreGL.MapView> </View> </View> ); }; export default AddData;","title":"Add your data"},{"location":"basemaps/BaseMaps/","text":"Maps Estimated reading time : 1 minutes Maps preview If you want to share a preview of your map, use this endpoint. https://basemaps.mapsaudi.com/styles/your-style-id/?raster?access_token=your-MapSaudi-access-token \\___/ \\___________________/ \\___________/ \\____/ \\________________________/ | | | \\ | scheme domain style ID preview type authentication token style ID : your style ID or one of our default styles or your custom style from the lab. authentication token: create your access token on the Keys page. preview type (optional): choose your preview in raster or vector. Valid values are raster, vector.","title":"Overview"},{"location":"basemaps/BaseMaps/#maps","text":"Estimated reading time : 1 minutes","title":"Maps"},{"location":"basemaps/BaseMaps/#maps-preview","text":"If you want to share a preview of your map, use this endpoint. https://basemaps.mapsaudi.com/styles/your-style-id/?raster?access_token=your-MapSaudi-access-token \\___/ \\___________________/ \\___________/ \\____/ \\________________________/ | | | \\ | scheme domain style ID preview type authentication token style ID : your style ID or one of our default styles or your custom style from the lab. authentication token: create your access token on the Keys page. preview type (optional): choose your preview in raster or vector. Valid values are raster, vector.","title":"Maps preview"},{"location":"basemaps/DynamicMaps/","text":"Get Map API Reference Estimated reading time : 3 minutes Map API The Maps API allows you to retrieve vector or raster tiles generated by the lab. You can use some libraries like Leaflet or MapLibre GL for JavaScript, Android or iOS to add a map to your website. Endpoint to use If you need tile URL, you should use this endpoint. We are supporting both raster png and vector pbf tiles. https://basemaps.mapsaudi.com/styles/your-style-id.json/{z}/{x}/{y}.png?access_token=your-mapsaudi-access-token \\___/ \\___________________/ \\___________/ \\________/ \\________________________/ | | | | | scheme domain style ID tiles coordinates authentication token style ID : your style ID or one of our default styles for raster tiles or streets-v2, landcover-v1, hillshade-v1 for vector tiles. authentication token : create your access token on the platform. If you want your style as json for MapLibre GL you will need this endpoint: https://basemaps.mapsaudi.com/styles/your-style-id.json?access_token=your-mapsaudi-access-token \\___/ \\___________________/ \\___________/ \\________________________/ | | | | scheme domain style ID authentication token style ID : your style ID or one of our default styles or your custom style from the platform. authentication token : create your access token on the platform. MapSaudi default styles We have some default styles which can be used by anyone with an access token. Here is our list (click on the image for a preview): Basic Arabic KSA Boundary Bright Arabic KSA Boundary Dark Matter Arabic KSA Boundary Basic Arabic KSA Buildings Bright Arabic KSA Boundary Secondary Outdoor Bright","title":"Dynamic Maps"},{"location":"basemaps/DynamicMaps/#get-map-api-reference","text":"Estimated reading time : 3 minutes","title":"Get Map API Reference"},{"location":"basemaps/DynamicMaps/#map-api","text":"The Maps API allows you to retrieve vector or raster tiles generated by the lab. You can use some libraries like Leaflet or MapLibre GL for JavaScript, Android or iOS to add a map to your website.","title":"Map API"},{"location":"basemaps/DynamicMaps/#endpoint-to-use","text":"If you need tile URL, you should use this endpoint. We are supporting both raster png and vector pbf tiles. https://basemaps.mapsaudi.com/styles/your-style-id.json/{z}/{x}/{y}.png?access_token=your-mapsaudi-access-token \\___/ \\___________________/ \\___________/ \\________/ \\________________________/ | | | | | scheme domain style ID tiles coordinates authentication token style ID : your style ID or one of our default styles for raster tiles or streets-v2, landcover-v1, hillshade-v1 for vector tiles. authentication token : create your access token on the platform. If you want your style as json for MapLibre GL you will need this endpoint: https://basemaps.mapsaudi.com/styles/your-style-id.json?access_token=your-mapsaudi-access-token \\___/ \\___________________/ \\___________/ \\________________________/ | | | | scheme domain style ID authentication token style ID : your style ID or one of our default styles or your custom style from the platform. authentication token : create your access token on the platform.","title":"Endpoint to use"},{"location":"basemaps/DynamicMaps/#mapsaudi-default-styles","text":"We have some default styles which can be used by anyone with an access token. Here is our list (click on the image for a preview): Basic Arabic KSA Boundary Bright Arabic KSA Boundary Dark Matter Arabic KSA Boundary Basic Arabic KSA Buildings Bright Arabic KSA Boundary Secondary Outdoor Bright","title":"MapSaudi default styles"}]}